// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: PortfolioBuilder.proto

#include "PortfolioBuilder.pb.h"
#include "PortfolioBuilder.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace portfolio {

static const char* PortfolioBuilder_method_names[] = {
  "/portfolio.PortfolioBuilder/BuildPortfolio",
  "/portfolio.PortfolioBuilder/SendPortfolioToStorage",
};

std::unique_ptr< PortfolioBuilder::Stub> PortfolioBuilder::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PortfolioBuilder::Stub> stub(new PortfolioBuilder::Stub(channel, options));
  return stub;
}

PortfolioBuilder::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_BuildPortfolio_(PortfolioBuilder_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendPortfolioToStorage_(PortfolioBuilder_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PortfolioBuilder::Stub::BuildPortfolio(::grpc::ClientContext* context, const ::portfolio::PortfolioRequest& request, ::portfolio::PortfolioResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::portfolio::PortfolioRequest, ::portfolio::PortfolioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BuildPortfolio_, context, request, response);
}

void PortfolioBuilder::Stub::async::BuildPortfolio(::grpc::ClientContext* context, const ::portfolio::PortfolioRequest* request, ::portfolio::PortfolioResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::portfolio::PortfolioRequest, ::portfolio::PortfolioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BuildPortfolio_, context, request, response, std::move(f));
}

void PortfolioBuilder::Stub::async::BuildPortfolio(::grpc::ClientContext* context, const ::portfolio::PortfolioRequest* request, ::portfolio::PortfolioResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BuildPortfolio_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::portfolio::PortfolioResponse>* PortfolioBuilder::Stub::PrepareAsyncBuildPortfolioRaw(::grpc::ClientContext* context, const ::portfolio::PortfolioRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::portfolio::PortfolioResponse, ::portfolio::PortfolioRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BuildPortfolio_, context, request);
}

::grpc::ClientAsyncResponseReader< ::portfolio::PortfolioResponse>* PortfolioBuilder::Stub::AsyncBuildPortfolioRaw(::grpc::ClientContext* context, const ::portfolio::PortfolioRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBuildPortfolioRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PortfolioBuilder::Stub::SendPortfolioToStorage(::grpc::ClientContext* context, const ::portfolio::StorageRequest& request, ::portfolio::StorageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::portfolio::StorageRequest, ::portfolio::StorageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendPortfolioToStorage_, context, request, response);
}

void PortfolioBuilder::Stub::async::SendPortfolioToStorage(::grpc::ClientContext* context, const ::portfolio::StorageRequest* request, ::portfolio::StorageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::portfolio::StorageRequest, ::portfolio::StorageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendPortfolioToStorage_, context, request, response, std::move(f));
}

void PortfolioBuilder::Stub::async::SendPortfolioToStorage(::grpc::ClientContext* context, const ::portfolio::StorageRequest* request, ::portfolio::StorageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendPortfolioToStorage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::portfolio::StorageResponse>* PortfolioBuilder::Stub::PrepareAsyncSendPortfolioToStorageRaw(::grpc::ClientContext* context, const ::portfolio::StorageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::portfolio::StorageResponse, ::portfolio::StorageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendPortfolioToStorage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::portfolio::StorageResponse>* PortfolioBuilder::Stub::AsyncSendPortfolioToStorageRaw(::grpc::ClientContext* context, const ::portfolio::StorageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendPortfolioToStorageRaw(context, request, cq);
  result->StartCall();
  return result;
}

PortfolioBuilder::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PortfolioBuilder_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PortfolioBuilder::Service, ::portfolio::PortfolioRequest, ::portfolio::PortfolioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PortfolioBuilder::Service* service,
             ::grpc::ServerContext* ctx,
             const ::portfolio::PortfolioRequest* req,
             ::portfolio::PortfolioResponse* resp) {
               return service->BuildPortfolio(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PortfolioBuilder_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PortfolioBuilder::Service, ::portfolio::StorageRequest, ::portfolio::StorageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PortfolioBuilder::Service* service,
             ::grpc::ServerContext* ctx,
             const ::portfolio::StorageRequest* req,
             ::portfolio::StorageResponse* resp) {
               return service->SendPortfolioToStorage(ctx, req, resp);
             }, this)));
}

PortfolioBuilder::Service::~Service() {
}

::grpc::Status PortfolioBuilder::Service::BuildPortfolio(::grpc::ServerContext* context, const ::portfolio::PortfolioRequest* request, ::portfolio::PortfolioResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PortfolioBuilder::Service::SendPortfolioToStorage(::grpc::ServerContext* context, const ::portfolio::StorageRequest* request, ::portfolio::StorageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace portfolio

