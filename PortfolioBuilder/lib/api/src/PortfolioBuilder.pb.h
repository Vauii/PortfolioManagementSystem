// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: PortfolioBuilder.proto
// Protobuf C++ Version: 5.29.1

#ifndef PortfolioBuilder_2eproto_2epb_2eh
#define PortfolioBuilder_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_PortfolioBuilder_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_PortfolioBuilder_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_PortfolioBuilder_2eproto;
namespace portfolio {
class PortfolioEntry;
struct PortfolioEntryDefaultTypeInternal;
extern PortfolioEntryDefaultTypeInternal _PortfolioEntry_default_instance_;
class PortfolioRequest;
struct PortfolioRequestDefaultTypeInternal;
extern PortfolioRequestDefaultTypeInternal _PortfolioRequest_default_instance_;
class PortfolioResponse;
struct PortfolioResponseDefaultTypeInternal;
extern PortfolioResponseDefaultTypeInternal _PortfolioResponse_default_instance_;
class StorageRequest;
struct StorageRequestDefaultTypeInternal;
extern StorageRequestDefaultTypeInternal _StorageRequest_default_instance_;
class StorageResponse;
struct StorageResponseDefaultTypeInternal;
extern StorageResponseDefaultTypeInternal _StorageResponse_default_instance_;
}  // namespace portfolio
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace portfolio {

// ===================================================================


// -------------------------------------------------------------------

class StorageResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:portfolio.StorageResponse) */ {
 public:
  inline StorageResponse() : StorageResponse(nullptr) {}
  ~StorageResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StorageResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StorageResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StorageResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline StorageResponse(const StorageResponse& from) : StorageResponse(nullptr, from) {}
  inline StorageResponse(StorageResponse&& from) noexcept
      : StorageResponse(nullptr, std::move(from)) {}
  inline StorageResponse& operator=(const StorageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageResponse& operator=(StorageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StorageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StorageResponse* internal_default_instance() {
    return reinterpret_cast<const StorageResponse*>(
        &_StorageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(StorageResponse& a, StorageResponse& b) { a.Swap(&b); }
  inline void Swap(StorageResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StorageResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StorageResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StorageResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StorageResponse& from) { StorageResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StorageResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "portfolio.StorageResponse"; }

 protected:
  explicit StorageResponse(::google::protobuf::Arena* arena);
  StorageResponse(::google::protobuf::Arena* arena, const StorageResponse& from);
  StorageResponse(::google::protobuf::Arena* arena, StorageResponse&& from) noexcept
      : StorageResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:portfolio.StorageResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StorageResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PortfolioBuilder_2eproto;
};
// -------------------------------------------------------------------

class StorageRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:portfolio.StorageRequest) */ {
 public:
  inline StorageRequest() : StorageRequest(nullptr) {}
  ~StorageRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StorageRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StorageRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StorageRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline StorageRequest(const StorageRequest& from) : StorageRequest(nullptr, from) {}
  inline StorageRequest(StorageRequest&& from) noexcept
      : StorageRequest(nullptr, std::move(from)) {}
  inline StorageRequest& operator=(const StorageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageRequest& operator=(StorageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StorageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StorageRequest* internal_default_instance() {
    return reinterpret_cast<const StorageRequest*>(
        &_StorageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(StorageRequest& a, StorageRequest& b) { a.Swap(&b); }
  inline void Swap(StorageRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StorageRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StorageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StorageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StorageRequest& from) { StorageRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StorageRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "portfolio.StorageRequest"; }

 protected:
  explicit StorageRequest(::google::protobuf::Arena* arena);
  StorageRequest(::google::protobuf::Arena* arena, const StorageRequest& from);
  StorageRequest(::google::protobuf::Arena* arena, StorageRequest&& from) noexcept
      : StorageRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClientIdFieldNumber = 1,
  };
  // string clientId = 1;
  void clear_clientid() ;
  const std::string& clientid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_clientid(Arg_&& arg, Args_... args);
  std::string* mutable_clientid();
  PROTOBUF_NODISCARD std::string* release_clientid();
  void set_allocated_clientid(std::string* value);

  private:
  const std::string& _internal_clientid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientid(
      const std::string& value);
  std::string* _internal_mutable_clientid();

  public:
  // @@protoc_insertion_point(class_scope:portfolio.StorageRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StorageRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr clientid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PortfolioBuilder_2eproto;
};
// -------------------------------------------------------------------

class PortfolioRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:portfolio.PortfolioRequest) */ {
 public:
  inline PortfolioRequest() : PortfolioRequest(nullptr) {}
  ~PortfolioRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PortfolioRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PortfolioRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PortfolioRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PortfolioRequest(const PortfolioRequest& from) : PortfolioRequest(nullptr, from) {}
  inline PortfolioRequest(PortfolioRequest&& from) noexcept
      : PortfolioRequest(nullptr, std::move(from)) {}
  inline PortfolioRequest& operator=(const PortfolioRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioRequest& operator=(PortfolioRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PortfolioRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PortfolioRequest* internal_default_instance() {
    return reinterpret_cast<const PortfolioRequest*>(
        &_PortfolioRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PortfolioRequest& a, PortfolioRequest& b) { a.Swap(&b); }
  inline void Swap(PortfolioRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortfolioRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PortfolioRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PortfolioRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PortfolioRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PortfolioRequest& from) { PortfolioRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PortfolioRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "portfolio.PortfolioRequest"; }

 protected:
  explicit PortfolioRequest(::google::protobuf::Arena* arena);
  PortfolioRequest(::google::protobuf::Arena* arena, const PortfolioRequest& from);
  PortfolioRequest(::google::protobuf::Arena* arena, PortfolioRequest&& from) noexcept
      : PortfolioRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClientIdFieldNumber = 1,
  };
  // string clientId = 1;
  void clear_clientid() ;
  const std::string& clientid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_clientid(Arg_&& arg, Args_... args);
  std::string* mutable_clientid();
  PROTOBUF_NODISCARD std::string* release_clientid();
  void set_allocated_clientid(std::string* value);

  private:
  const std::string& _internal_clientid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientid(
      const std::string& value);
  std::string* _internal_mutable_clientid();

  public:
  // @@protoc_insertion_point(class_scope:portfolio.PortfolioRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PortfolioRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr clientid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PortfolioBuilder_2eproto;
};
// -------------------------------------------------------------------

class PortfolioEntry final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:portfolio.PortfolioEntry) */ {
 public:
  inline PortfolioEntry() : PortfolioEntry(nullptr) {}
  ~PortfolioEntry() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PortfolioEntry* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PortfolioEntry));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PortfolioEntry(
      ::google::protobuf::internal::ConstantInitialized);

  inline PortfolioEntry(const PortfolioEntry& from) : PortfolioEntry(nullptr, from) {}
  inline PortfolioEntry(PortfolioEntry&& from) noexcept
      : PortfolioEntry(nullptr, std::move(from)) {}
  inline PortfolioEntry& operator=(const PortfolioEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioEntry& operator=(PortfolioEntry&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PortfolioEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const PortfolioEntry* internal_default_instance() {
    return reinterpret_cast<const PortfolioEntry*>(
        &_PortfolioEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(PortfolioEntry& a, PortfolioEntry& b) { a.Swap(&b); }
  inline void Swap(PortfolioEntry* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortfolioEntry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PortfolioEntry* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PortfolioEntry>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PortfolioEntry& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PortfolioEntry& from) { PortfolioEntry::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PortfolioEntry* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "portfolio.PortfolioEntry"; }

 protected:
  explicit PortfolioEntry(::google::protobuf::Arena* arena);
  PortfolioEntry(::google::protobuf::Arena* arena, const PortfolioEntry& from);
  PortfolioEntry(::google::protobuf::Arena* arena, PortfolioEntry&& from) noexcept
      : PortfolioEntry(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStockSymbolFieldNumber = 1,
    kPriceFieldNumber = 3,
    kCountFieldNumber = 2,
  };
  // string stockSymbol = 1;
  void clear_stocksymbol() ;
  const std::string& stocksymbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stocksymbol(Arg_&& arg, Args_... args);
  std::string* mutable_stocksymbol();
  PROTOBUF_NODISCARD std::string* release_stocksymbol();
  void set_allocated_stocksymbol(std::string* value);

  private:
  const std::string& _internal_stocksymbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stocksymbol(
      const std::string& value);
  std::string* _internal_mutable_stocksymbol();

  public:
  // int64 price = 3;
  void clear_price() ;
  ::int64_t price() const;
  void set_price(::int64_t value);

  private:
  ::int64_t _internal_price() const;
  void _internal_set_price(::int64_t value);

  public:
  // int32 count = 2;
  void clear_count() ;
  ::int32_t count() const;
  void set_count(::int32_t value);

  private:
  ::int32_t _internal_count() const;
  void _internal_set_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:portfolio.PortfolioEntry)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PortfolioEntry& from_msg);
    ::google::protobuf::internal::ArenaStringPtr stocksymbol_;
    ::int64_t price_;
    ::int32_t count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PortfolioBuilder_2eproto;
};
// -------------------------------------------------------------------

class PortfolioResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:portfolio.PortfolioResponse) */ {
 public:
  inline PortfolioResponse() : PortfolioResponse(nullptr) {}
  ~PortfolioResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PortfolioResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PortfolioResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PortfolioResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PortfolioResponse(const PortfolioResponse& from) : PortfolioResponse(nullptr, from) {}
  inline PortfolioResponse(PortfolioResponse&& from) noexcept
      : PortfolioResponse(nullptr, std::move(from)) {}
  inline PortfolioResponse& operator=(const PortfolioResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioResponse& operator=(PortfolioResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PortfolioResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PortfolioResponse* internal_default_instance() {
    return reinterpret_cast<const PortfolioResponse*>(
        &_PortfolioResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PortfolioResponse& a, PortfolioResponse& b) { a.Swap(&b); }
  inline void Swap(PortfolioResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortfolioResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PortfolioResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PortfolioResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PortfolioResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PortfolioResponse& from) { PortfolioResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PortfolioResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "portfolio.PortfolioResponse"; }

 protected:
  explicit PortfolioResponse(::google::protobuf::Arena* arena);
  PortfolioResponse(::google::protobuf::Arena* arena, const PortfolioResponse& from);
  PortfolioResponse(::google::protobuf::Arena* arena, PortfolioResponse&& from) noexcept
      : PortfolioResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEntriesFieldNumber = 2,
    kClientIdFieldNumber = 1,
  };
  // repeated .portfolio.PortfolioEntry entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;

  public:
  void clear_entries() ;
  ::portfolio::PortfolioEntry* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField<::portfolio::PortfolioEntry>* mutable_entries();

  private:
  const ::google::protobuf::RepeatedPtrField<::portfolio::PortfolioEntry>& _internal_entries() const;
  ::google::protobuf::RepeatedPtrField<::portfolio::PortfolioEntry>* _internal_mutable_entries();
  public:
  const ::portfolio::PortfolioEntry& entries(int index) const;
  ::portfolio::PortfolioEntry* add_entries();
  const ::google::protobuf::RepeatedPtrField<::portfolio::PortfolioEntry>& entries() const;
  // string clientId = 1;
  void clear_clientid() ;
  const std::string& clientid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_clientid(Arg_&& arg, Args_... args);
  std::string* mutable_clientid();
  PROTOBUF_NODISCARD std::string* release_clientid();
  void set_allocated_clientid(std::string* value);

  private:
  const std::string& _internal_clientid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientid(
      const std::string& value);
  std::string* _internal_mutable_clientid();

  public:
  // @@protoc_insertion_point(class_scope:portfolio.PortfolioResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PortfolioResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::portfolio::PortfolioEntry > entries_;
    ::google::protobuf::internal::ArenaStringPtr clientid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PortfolioBuilder_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PortfolioRequest

// string clientId = 1;
inline void PortfolioRequest::clear_clientid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clientid_.ClearToEmpty();
}
inline const std::string& PortfolioRequest::clientid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:portfolio.PortfolioRequest.clientId)
  return _internal_clientid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PortfolioRequest::set_clientid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clientid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:portfolio.PortfolioRequest.clientId)
}
inline std::string* PortfolioRequest::mutable_clientid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_clientid();
  // @@protoc_insertion_point(field_mutable:portfolio.PortfolioRequest.clientId)
  return _s;
}
inline const std::string& PortfolioRequest::_internal_clientid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.clientid_.Get();
}
inline void PortfolioRequest::_internal_set_clientid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clientid_.Set(value, GetArena());
}
inline std::string* PortfolioRequest::_internal_mutable_clientid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.clientid_.Mutable( GetArena());
}
inline std::string* PortfolioRequest::release_clientid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:portfolio.PortfolioRequest.clientId)
  return _impl_.clientid_.Release();
}
inline void PortfolioRequest::set_allocated_clientid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clientid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.clientid_.IsDefault()) {
    _impl_.clientid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:portfolio.PortfolioRequest.clientId)
}

// -------------------------------------------------------------------

// PortfolioResponse

// string clientId = 1;
inline void PortfolioResponse::clear_clientid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clientid_.ClearToEmpty();
}
inline const std::string& PortfolioResponse::clientid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:portfolio.PortfolioResponse.clientId)
  return _internal_clientid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PortfolioResponse::set_clientid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clientid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:portfolio.PortfolioResponse.clientId)
}
inline std::string* PortfolioResponse::mutable_clientid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_clientid();
  // @@protoc_insertion_point(field_mutable:portfolio.PortfolioResponse.clientId)
  return _s;
}
inline const std::string& PortfolioResponse::_internal_clientid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.clientid_.Get();
}
inline void PortfolioResponse::_internal_set_clientid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clientid_.Set(value, GetArena());
}
inline std::string* PortfolioResponse::_internal_mutable_clientid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.clientid_.Mutable( GetArena());
}
inline std::string* PortfolioResponse::release_clientid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:portfolio.PortfolioResponse.clientId)
  return _impl_.clientid_.Release();
}
inline void PortfolioResponse::set_allocated_clientid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clientid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.clientid_.IsDefault()) {
    _impl_.clientid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:portfolio.PortfolioResponse.clientId)
}

// repeated .portfolio.PortfolioEntry entries = 2;
inline int PortfolioResponse::_internal_entries_size() const {
  return _internal_entries().size();
}
inline int PortfolioResponse::entries_size() const {
  return _internal_entries_size();
}
inline void PortfolioResponse::clear_entries() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.entries_.Clear();
}
inline ::portfolio::PortfolioEntry* PortfolioResponse::mutable_entries(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:portfolio.PortfolioResponse.entries)
  return _internal_mutable_entries()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::portfolio::PortfolioEntry>* PortfolioResponse::mutable_entries()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:portfolio.PortfolioResponse.entries)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_entries();
}
inline const ::portfolio::PortfolioEntry& PortfolioResponse::entries(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:portfolio.PortfolioResponse.entries)
  return _internal_entries().Get(index);
}
inline ::portfolio::PortfolioEntry* PortfolioResponse::add_entries() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::portfolio::PortfolioEntry* _add = _internal_mutable_entries()->Add();
  // @@protoc_insertion_point(field_add:portfolio.PortfolioResponse.entries)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::portfolio::PortfolioEntry>& PortfolioResponse::entries() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:portfolio.PortfolioResponse.entries)
  return _internal_entries();
}
inline const ::google::protobuf::RepeatedPtrField<::portfolio::PortfolioEntry>&
PortfolioResponse::_internal_entries() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.entries_;
}
inline ::google::protobuf::RepeatedPtrField<::portfolio::PortfolioEntry>*
PortfolioResponse::_internal_mutable_entries() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.entries_;
}

// -------------------------------------------------------------------

// PortfolioEntry

// string stockSymbol = 1;
inline void PortfolioEntry::clear_stocksymbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stocksymbol_.ClearToEmpty();
}
inline const std::string& PortfolioEntry::stocksymbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:portfolio.PortfolioEntry.stockSymbol)
  return _internal_stocksymbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PortfolioEntry::set_stocksymbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stocksymbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:portfolio.PortfolioEntry.stockSymbol)
}
inline std::string* PortfolioEntry::mutable_stocksymbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stocksymbol();
  // @@protoc_insertion_point(field_mutable:portfolio.PortfolioEntry.stockSymbol)
  return _s;
}
inline const std::string& PortfolioEntry::_internal_stocksymbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stocksymbol_.Get();
}
inline void PortfolioEntry::_internal_set_stocksymbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stocksymbol_.Set(value, GetArena());
}
inline std::string* PortfolioEntry::_internal_mutable_stocksymbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.stocksymbol_.Mutable( GetArena());
}
inline std::string* PortfolioEntry::release_stocksymbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:portfolio.PortfolioEntry.stockSymbol)
  return _impl_.stocksymbol_.Release();
}
inline void PortfolioEntry::set_allocated_stocksymbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stocksymbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.stocksymbol_.IsDefault()) {
    _impl_.stocksymbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:portfolio.PortfolioEntry.stockSymbol)
}

// int32 count = 2;
inline void PortfolioEntry::clear_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = 0;
}
inline ::int32_t PortfolioEntry::count() const {
  // @@protoc_insertion_point(field_get:portfolio.PortfolioEntry.count)
  return _internal_count();
}
inline void PortfolioEntry::set_count(::int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:portfolio.PortfolioEntry.count)
}
inline ::int32_t PortfolioEntry::_internal_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.count_;
}
inline void PortfolioEntry::_internal_set_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = value;
}

// int64 price = 3;
inline void PortfolioEntry::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = ::int64_t{0};
}
inline ::int64_t PortfolioEntry::price() const {
  // @@protoc_insertion_point(field_get:portfolio.PortfolioEntry.price)
  return _internal_price();
}
inline void PortfolioEntry::set_price(::int64_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:portfolio.PortfolioEntry.price)
}
inline ::int64_t PortfolioEntry::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void PortfolioEntry::_internal_set_price(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// -------------------------------------------------------------------

// StorageRequest

// string clientId = 1;
inline void StorageRequest::clear_clientid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clientid_.ClearToEmpty();
}
inline const std::string& StorageRequest::clientid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:portfolio.StorageRequest.clientId)
  return _internal_clientid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StorageRequest::set_clientid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clientid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:portfolio.StorageRequest.clientId)
}
inline std::string* StorageRequest::mutable_clientid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_clientid();
  // @@protoc_insertion_point(field_mutable:portfolio.StorageRequest.clientId)
  return _s;
}
inline const std::string& StorageRequest::_internal_clientid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.clientid_.Get();
}
inline void StorageRequest::_internal_set_clientid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clientid_.Set(value, GetArena());
}
inline std::string* StorageRequest::_internal_mutable_clientid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.clientid_.Mutable( GetArena());
}
inline std::string* StorageRequest::release_clientid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:portfolio.StorageRequest.clientId)
  return _impl_.clientid_.Release();
}
inline void StorageRequest::set_allocated_clientid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clientid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.clientid_.IsDefault()) {
    _impl_.clientid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:portfolio.StorageRequest.clientId)
}

// -------------------------------------------------------------------

// StorageResponse

// bool success = 1;
inline void StorageResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool StorageResponse::success() const {
  // @@protoc_insertion_point(field_get:portfolio.StorageResponse.success)
  return _internal_success();
}
inline void StorageResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:portfolio.StorageResponse.success)
}
inline bool StorageResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void StorageResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void StorageResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& StorageResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:portfolio.StorageResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StorageResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:portfolio.StorageResponse.message)
}
inline std::string* StorageResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:portfolio.StorageResponse.message)
  return _s;
}
inline const std::string& StorageResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void StorageResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* StorageResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* StorageResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:portfolio.StorageResponse.message)
  return _impl_.message_.Release();
}
inline void StorageResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:portfolio.StorageResponse.message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace portfolio


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // PortfolioBuilder_2eproto_2epb_2eh
