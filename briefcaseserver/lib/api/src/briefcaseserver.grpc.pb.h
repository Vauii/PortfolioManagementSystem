// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: briefcaseserver/lib/api/src/briefcaseserver.proto
#ifndef GRPC_briefcaseserver_2flib_2fapi_2fsrc_2fbriefcaseserver_2eproto__INCLUDED
#define GRPC_briefcaseserver_2flib_2fapi_2fsrc_2fbriefcaseserver_2eproto__INCLUDED

#include "briefcaseserver/lib/api/src/briefcaseserver.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace backendservice {

class BriefcaseService final {
 public:
  static constexpr char const* service_full_name() {
    return "backendservice.BriefcaseService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status postCsv(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::backendservice::BriefcaseCSVResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::BriefcaseCSVResponse>> AsyncpostCsv(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::BriefcaseCSVResponse>>(AsyncpostCsvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::BriefcaseCSVResponse>> PrepareAsyncpostCsv(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::BriefcaseCSVResponse>>(PrepareAsyncpostCsvRaw(context, request, cq));
    }
    virtual ::grpc::Status putBreafecase(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::backendservice::BriefcaseCSVResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::BriefcaseCSVResponse>> AsyncputBreafecase(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::BriefcaseCSVResponse>>(AsyncputBreafecaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::BriefcaseCSVResponse>> PrepareAsyncputBreafecase(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::BriefcaseCSVResponse>>(PrepareAsyncputBreafecaseRaw(context, request, cq));
    }
    virtual ::grpc::Status getBreifcaseInfo(::grpc::ClientContext* context, const ::backendservice::BriefcaseInfoRequest& request, ::backendservice::BriefcaseInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::BriefcaseInfoResponse>> AsyncgetBreifcaseInfo(::grpc::ClientContext* context, const ::backendservice::BriefcaseInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::BriefcaseInfoResponse>>(AsyncgetBreifcaseInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::BriefcaseInfoResponse>> PrepareAsyncgetBreifcaseInfo(::grpc::ClientContext* context, const ::backendservice::BriefcaseInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::BriefcaseInfoResponse>>(PrepareAsyncgetBreifcaseInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status addRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::backendservice::RecomendedValuesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::RecomendedValuesResponse>> AsyncaddRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::RecomendedValuesResponse>>(AsyncaddRecomendedValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::RecomendedValuesResponse>> PrepareAsyncaddRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::RecomendedValuesResponse>>(PrepareAsyncaddRecomendedValuesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void postCsv(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest* request, ::backendservice::BriefcaseCSVResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void postCsv(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest* request, ::backendservice::BriefcaseCSVResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void putBreafecase(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest* request, ::backendservice::BriefcaseCSVResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void putBreafecase(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest* request, ::backendservice::BriefcaseCSVResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getBreifcaseInfo(::grpc::ClientContext* context, const ::backendservice::BriefcaseInfoRequest* request, ::backendservice::BriefcaseInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getBreifcaseInfo(::grpc::ClientContext* context, const ::backendservice::BriefcaseInfoRequest* request, ::backendservice::BriefcaseInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void addRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest* request, ::backendservice::RecomendedValuesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void addRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest* request, ::backendservice::RecomendedValuesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::BriefcaseCSVResponse>* AsyncpostCsvRaw(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::BriefcaseCSVResponse>* PrepareAsyncpostCsvRaw(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::BriefcaseCSVResponse>* AsyncputBreafecaseRaw(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::BriefcaseCSVResponse>* PrepareAsyncputBreafecaseRaw(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::BriefcaseInfoResponse>* AsyncgetBreifcaseInfoRaw(::grpc::ClientContext* context, const ::backendservice::BriefcaseInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::BriefcaseInfoResponse>* PrepareAsyncgetBreifcaseInfoRaw(::grpc::ClientContext* context, const ::backendservice::BriefcaseInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::RecomendedValuesResponse>* AsyncaddRecomendedValuesRaw(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::RecomendedValuesResponse>* PrepareAsyncaddRecomendedValuesRaw(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status postCsv(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::backendservice::BriefcaseCSVResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseCSVResponse>> AsyncpostCsv(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseCSVResponse>>(AsyncpostCsvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseCSVResponse>> PrepareAsyncpostCsv(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseCSVResponse>>(PrepareAsyncpostCsvRaw(context, request, cq));
    }
    ::grpc::Status putBreafecase(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::backendservice::BriefcaseCSVResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseCSVResponse>> AsyncputBreafecase(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseCSVResponse>>(AsyncputBreafecaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseCSVResponse>> PrepareAsyncputBreafecase(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseCSVResponse>>(PrepareAsyncputBreafecaseRaw(context, request, cq));
    }
    ::grpc::Status getBreifcaseInfo(::grpc::ClientContext* context, const ::backendservice::BriefcaseInfoRequest& request, ::backendservice::BriefcaseInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseInfoResponse>> AsyncgetBreifcaseInfo(::grpc::ClientContext* context, const ::backendservice::BriefcaseInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseInfoResponse>>(AsyncgetBreifcaseInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseInfoResponse>> PrepareAsyncgetBreifcaseInfo(::grpc::ClientContext* context, const ::backendservice::BriefcaseInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseInfoResponse>>(PrepareAsyncgetBreifcaseInfoRaw(context, request, cq));
    }
    ::grpc::Status addRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::backendservice::RecomendedValuesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::RecomendedValuesResponse>> AsyncaddRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::RecomendedValuesResponse>>(AsyncaddRecomendedValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::RecomendedValuesResponse>> PrepareAsyncaddRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::RecomendedValuesResponse>>(PrepareAsyncaddRecomendedValuesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void postCsv(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest* request, ::backendservice::BriefcaseCSVResponse* response, std::function<void(::grpc::Status)>) override;
      void postCsv(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest* request, ::backendservice::BriefcaseCSVResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void putBreafecase(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest* request, ::backendservice::BriefcaseCSVResponse* response, std::function<void(::grpc::Status)>) override;
      void putBreafecase(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest* request, ::backendservice::BriefcaseCSVResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getBreifcaseInfo(::grpc::ClientContext* context, const ::backendservice::BriefcaseInfoRequest* request, ::backendservice::BriefcaseInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void getBreifcaseInfo(::grpc::ClientContext* context, const ::backendservice::BriefcaseInfoRequest* request, ::backendservice::BriefcaseInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void addRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest* request, ::backendservice::RecomendedValuesResponse* response, std::function<void(::grpc::Status)>) override;
      void addRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest* request, ::backendservice::RecomendedValuesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseCSVResponse>* AsyncpostCsvRaw(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseCSVResponse>* PrepareAsyncpostCsvRaw(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseCSVResponse>* AsyncputBreafecaseRaw(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseCSVResponse>* PrepareAsyncputBreafecaseRaw(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseInfoResponse>* AsyncgetBreifcaseInfoRaw(::grpc::ClientContext* context, const ::backendservice::BriefcaseInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseInfoResponse>* PrepareAsyncgetBreifcaseInfoRaw(::grpc::ClientContext* context, const ::backendservice::BriefcaseInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backendservice::RecomendedValuesResponse>* AsyncaddRecomendedValuesRaw(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backendservice::RecomendedValuesResponse>* PrepareAsyncaddRecomendedValuesRaw(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_postCsv_;
    const ::grpc::internal::RpcMethod rpcmethod_putBreafecase_;
    const ::grpc::internal::RpcMethod rpcmethod_getBreifcaseInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_addRecomendedValues_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status postCsv(::grpc::ServerContext* context, const ::backendservice::BriefcaseCSVRequest* request, ::backendservice::BriefcaseCSVResponse* response);
    virtual ::grpc::Status putBreafecase(::grpc::ServerContext* context, const ::backendservice::BriefcaseCSVRequest* request, ::backendservice::BriefcaseCSVResponse* response);
    virtual ::grpc::Status getBreifcaseInfo(::grpc::ServerContext* context, const ::backendservice::BriefcaseInfoRequest* request, ::backendservice::BriefcaseInfoResponse* response);
    virtual ::grpc::Status addRecomendedValues(::grpc::ServerContext* context, const ::backendservice::RecomendedValuesRequest* request, ::backendservice::RecomendedValuesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_postCsv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_postCsv() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_postCsv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postCsv(::grpc::ServerContext* /*context*/, const ::backendservice::BriefcaseCSVRequest* /*request*/, ::backendservice::BriefcaseCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpostCsv(::grpc::ServerContext* context, ::backendservice::BriefcaseCSVRequest* request, ::grpc::ServerAsyncResponseWriter< ::backendservice::BriefcaseCSVResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_putBreafecase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_putBreafecase() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_putBreafecase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status putBreafecase(::grpc::ServerContext* /*context*/, const ::backendservice::BriefcaseCSVRequest* /*request*/, ::backendservice::BriefcaseCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestputBreafecase(::grpc::ServerContext* context, ::backendservice::BriefcaseCSVRequest* request, ::grpc::ServerAsyncResponseWriter< ::backendservice::BriefcaseCSVResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getBreifcaseInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getBreifcaseInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getBreifcaseInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBreifcaseInfo(::grpc::ServerContext* /*context*/, const ::backendservice::BriefcaseInfoRequest* /*request*/, ::backendservice::BriefcaseInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetBreifcaseInfo(::grpc::ServerContext* context, ::backendservice::BriefcaseInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::backendservice::BriefcaseInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addRecomendedValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addRecomendedValues() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_addRecomendedValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addRecomendedValues(::grpc::ServerContext* /*context*/, const ::backendservice::RecomendedValuesRequest* /*request*/, ::backendservice::RecomendedValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddRecomendedValues(::grpc::ServerContext* context, ::backendservice::RecomendedValuesRequest* request, ::grpc::ServerAsyncResponseWriter< ::backendservice::RecomendedValuesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_postCsv<WithAsyncMethod_putBreafecase<WithAsyncMethod_getBreifcaseInfo<WithAsyncMethod_addRecomendedValues<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_postCsv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_postCsv() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::backendservice::BriefcaseCSVRequest, ::backendservice::BriefcaseCSVResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backendservice::BriefcaseCSVRequest* request, ::backendservice::BriefcaseCSVResponse* response) { return this->postCsv(context, request, response); }));}
    void SetMessageAllocatorFor_postCsv(
        ::grpc::MessageAllocator< ::backendservice::BriefcaseCSVRequest, ::backendservice::BriefcaseCSVResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backendservice::BriefcaseCSVRequest, ::backendservice::BriefcaseCSVResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_postCsv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postCsv(::grpc::ServerContext* /*context*/, const ::backendservice::BriefcaseCSVRequest* /*request*/, ::backendservice::BriefcaseCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* postCsv(
      ::grpc::CallbackServerContext* /*context*/, const ::backendservice::BriefcaseCSVRequest* /*request*/, ::backendservice::BriefcaseCSVResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_putBreafecase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_putBreafecase() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::backendservice::BriefcaseCSVRequest, ::backendservice::BriefcaseCSVResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backendservice::BriefcaseCSVRequest* request, ::backendservice::BriefcaseCSVResponse* response) { return this->putBreafecase(context, request, response); }));}
    void SetMessageAllocatorFor_putBreafecase(
        ::grpc::MessageAllocator< ::backendservice::BriefcaseCSVRequest, ::backendservice::BriefcaseCSVResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backendservice::BriefcaseCSVRequest, ::backendservice::BriefcaseCSVResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_putBreafecase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status putBreafecase(::grpc::ServerContext* /*context*/, const ::backendservice::BriefcaseCSVRequest* /*request*/, ::backendservice::BriefcaseCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* putBreafecase(
      ::grpc::CallbackServerContext* /*context*/, const ::backendservice::BriefcaseCSVRequest* /*request*/, ::backendservice::BriefcaseCSVResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getBreifcaseInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getBreifcaseInfo() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::backendservice::BriefcaseInfoRequest, ::backendservice::BriefcaseInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backendservice::BriefcaseInfoRequest* request, ::backendservice::BriefcaseInfoResponse* response) { return this->getBreifcaseInfo(context, request, response); }));}
    void SetMessageAllocatorFor_getBreifcaseInfo(
        ::grpc::MessageAllocator< ::backendservice::BriefcaseInfoRequest, ::backendservice::BriefcaseInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backendservice::BriefcaseInfoRequest, ::backendservice::BriefcaseInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getBreifcaseInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBreifcaseInfo(::grpc::ServerContext* /*context*/, const ::backendservice::BriefcaseInfoRequest* /*request*/, ::backendservice::BriefcaseInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getBreifcaseInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::backendservice::BriefcaseInfoRequest* /*request*/, ::backendservice::BriefcaseInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_addRecomendedValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_addRecomendedValues() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::backendservice::RecomendedValuesRequest, ::backendservice::RecomendedValuesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backendservice::RecomendedValuesRequest* request, ::backendservice::RecomendedValuesResponse* response) { return this->addRecomendedValues(context, request, response); }));}
    void SetMessageAllocatorFor_addRecomendedValues(
        ::grpc::MessageAllocator< ::backendservice::RecomendedValuesRequest, ::backendservice::RecomendedValuesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backendservice::RecomendedValuesRequest, ::backendservice::RecomendedValuesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_addRecomendedValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addRecomendedValues(::grpc::ServerContext* /*context*/, const ::backendservice::RecomendedValuesRequest* /*request*/, ::backendservice::RecomendedValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addRecomendedValues(
      ::grpc::CallbackServerContext* /*context*/, const ::backendservice::RecomendedValuesRequest* /*request*/, ::backendservice::RecomendedValuesResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_postCsv<WithCallbackMethod_putBreafecase<WithCallbackMethod_getBreifcaseInfo<WithCallbackMethod_addRecomendedValues<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_postCsv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_postCsv() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_postCsv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postCsv(::grpc::ServerContext* /*context*/, const ::backendservice::BriefcaseCSVRequest* /*request*/, ::backendservice::BriefcaseCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_putBreafecase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_putBreafecase() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_putBreafecase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status putBreafecase(::grpc::ServerContext* /*context*/, const ::backendservice::BriefcaseCSVRequest* /*request*/, ::backendservice::BriefcaseCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getBreifcaseInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getBreifcaseInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getBreifcaseInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBreifcaseInfo(::grpc::ServerContext* /*context*/, const ::backendservice::BriefcaseInfoRequest* /*request*/, ::backendservice::BriefcaseInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addRecomendedValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addRecomendedValues() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_addRecomendedValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addRecomendedValues(::grpc::ServerContext* /*context*/, const ::backendservice::RecomendedValuesRequest* /*request*/, ::backendservice::RecomendedValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_postCsv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_postCsv() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_postCsv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postCsv(::grpc::ServerContext* /*context*/, const ::backendservice::BriefcaseCSVRequest* /*request*/, ::backendservice::BriefcaseCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpostCsv(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_putBreafecase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_putBreafecase() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_putBreafecase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status putBreafecase(::grpc::ServerContext* /*context*/, const ::backendservice::BriefcaseCSVRequest* /*request*/, ::backendservice::BriefcaseCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestputBreafecase(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getBreifcaseInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getBreifcaseInfo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getBreifcaseInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBreifcaseInfo(::grpc::ServerContext* /*context*/, const ::backendservice::BriefcaseInfoRequest* /*request*/, ::backendservice::BriefcaseInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetBreifcaseInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_addRecomendedValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addRecomendedValues() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_addRecomendedValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addRecomendedValues(::grpc::ServerContext* /*context*/, const ::backendservice::RecomendedValuesRequest* /*request*/, ::backendservice::RecomendedValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddRecomendedValues(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_postCsv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_postCsv() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->postCsv(context, request, response); }));
    }
    ~WithRawCallbackMethod_postCsv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postCsv(::grpc::ServerContext* /*context*/, const ::backendservice::BriefcaseCSVRequest* /*request*/, ::backendservice::BriefcaseCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* postCsv(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_putBreafecase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_putBreafecase() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->putBreafecase(context, request, response); }));
    }
    ~WithRawCallbackMethod_putBreafecase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status putBreafecase(::grpc::ServerContext* /*context*/, const ::backendservice::BriefcaseCSVRequest* /*request*/, ::backendservice::BriefcaseCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* putBreafecase(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getBreifcaseInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getBreifcaseInfo() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getBreifcaseInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_getBreifcaseInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getBreifcaseInfo(::grpc::ServerContext* /*context*/, const ::backendservice::BriefcaseInfoRequest* /*request*/, ::backendservice::BriefcaseInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getBreifcaseInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_addRecomendedValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_addRecomendedValues() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addRecomendedValues(context, request, response); }));
    }
    ~WithRawCallbackMethod_addRecomendedValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addRecomendedValues(::grpc::ServerContext* /*context*/, const ::backendservice::RecomendedValuesRequest* /*request*/, ::backendservice::RecomendedValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addRecomendedValues(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_postCsv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_postCsv() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backendservice::BriefcaseCSVRequest, ::backendservice::BriefcaseCSVResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backendservice::BriefcaseCSVRequest, ::backendservice::BriefcaseCSVResponse>* streamer) {
                       return this->StreamedpostCsv(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_postCsv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status postCsv(::grpc::ServerContext* /*context*/, const ::backendservice::BriefcaseCSVRequest* /*request*/, ::backendservice::BriefcaseCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpostCsv(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backendservice::BriefcaseCSVRequest,::backendservice::BriefcaseCSVResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_putBreafecase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_putBreafecase() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backendservice::BriefcaseCSVRequest, ::backendservice::BriefcaseCSVResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backendservice::BriefcaseCSVRequest, ::backendservice::BriefcaseCSVResponse>* streamer) {
                       return this->StreamedputBreafecase(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_putBreafecase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status putBreafecase(::grpc::ServerContext* /*context*/, const ::backendservice::BriefcaseCSVRequest* /*request*/, ::backendservice::BriefcaseCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedputBreafecase(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backendservice::BriefcaseCSVRequest,::backendservice::BriefcaseCSVResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getBreifcaseInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getBreifcaseInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backendservice::BriefcaseInfoRequest, ::backendservice::BriefcaseInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backendservice::BriefcaseInfoRequest, ::backendservice::BriefcaseInfoResponse>* streamer) {
                       return this->StreamedgetBreifcaseInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getBreifcaseInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getBreifcaseInfo(::grpc::ServerContext* /*context*/, const ::backendservice::BriefcaseInfoRequest* /*request*/, ::backendservice::BriefcaseInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetBreifcaseInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backendservice::BriefcaseInfoRequest,::backendservice::BriefcaseInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addRecomendedValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addRecomendedValues() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backendservice::RecomendedValuesRequest, ::backendservice::RecomendedValuesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backendservice::RecomendedValuesRequest, ::backendservice::RecomendedValuesResponse>* streamer) {
                       return this->StreamedaddRecomendedValues(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addRecomendedValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addRecomendedValues(::grpc::ServerContext* /*context*/, const ::backendservice::RecomendedValuesRequest* /*request*/, ::backendservice::RecomendedValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddRecomendedValues(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backendservice::RecomendedValuesRequest,::backendservice::RecomendedValuesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_postCsv<WithStreamedUnaryMethod_putBreafecase<WithStreamedUnaryMethod_getBreifcaseInfo<WithStreamedUnaryMethod_addRecomendedValues<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_postCsv<WithStreamedUnaryMethod_putBreafecase<WithStreamedUnaryMethod_getBreifcaseInfo<WithStreamedUnaryMethod_addRecomendedValues<Service > > > > StreamedService;
};

}  // namespace backendservice


#endif  // GRPC_briefcaseserver_2flib_2fapi_2fsrc_2fbriefcaseserver_2eproto__INCLUDED
