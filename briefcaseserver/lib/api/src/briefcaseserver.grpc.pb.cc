// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: briefcaseserver/lib/api/src/briefcaseserver.proto

#include "briefcaseserver/lib/api/src/briefcaseserver.pb.h"
#include "briefcaseserver/lib/api/src/briefcaseserver.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace backendservice {

static const char* BriefcaseService_method_names[] = {
  "/backendservice.BriefcaseService/postCsv",
  "/backendservice.BriefcaseService/putBreafecase",
  "/backendservice.BriefcaseService/getBreifcaseInfo",
  "/backendservice.BriefcaseService/addRecomendedValues",
};

std::unique_ptr< BriefcaseService::Stub> BriefcaseService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BriefcaseService::Stub> stub(new BriefcaseService::Stub(channel, options));
  return stub;
}

BriefcaseService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_postCsv_(BriefcaseService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_putBreafecase_(BriefcaseService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getBreifcaseInfo_(BriefcaseService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addRecomendedValues_(BriefcaseService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BriefcaseService::Stub::postCsv(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::backendservice::BriefcaseCSVResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backendservice::BriefcaseCSVRequest, ::backendservice::BriefcaseCSVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_postCsv_, context, request, response);
}

void BriefcaseService::Stub::async::postCsv(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest* request, ::backendservice::BriefcaseCSVResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backendservice::BriefcaseCSVRequest, ::backendservice::BriefcaseCSVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_postCsv_, context, request, response, std::move(f));
}

void BriefcaseService::Stub::async::postCsv(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest* request, ::backendservice::BriefcaseCSVResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_postCsv_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseCSVResponse>* BriefcaseService::Stub::PrepareAsyncpostCsvRaw(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backendservice::BriefcaseCSVResponse, ::backendservice::BriefcaseCSVRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_postCsv_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseCSVResponse>* BriefcaseService::Stub::AsyncpostCsvRaw(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpostCsvRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BriefcaseService::Stub::putBreafecase(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::backendservice::BriefcaseCSVResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backendservice::BriefcaseCSVRequest, ::backendservice::BriefcaseCSVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_putBreafecase_, context, request, response);
}

void BriefcaseService::Stub::async::putBreafecase(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest* request, ::backendservice::BriefcaseCSVResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backendservice::BriefcaseCSVRequest, ::backendservice::BriefcaseCSVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_putBreafecase_, context, request, response, std::move(f));
}

void BriefcaseService::Stub::async::putBreafecase(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest* request, ::backendservice::BriefcaseCSVResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_putBreafecase_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseCSVResponse>* BriefcaseService::Stub::PrepareAsyncputBreafecaseRaw(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backendservice::BriefcaseCSVResponse, ::backendservice::BriefcaseCSVRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_putBreafecase_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseCSVResponse>* BriefcaseService::Stub::AsyncputBreafecaseRaw(::grpc::ClientContext* context, const ::backendservice::BriefcaseCSVRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncputBreafecaseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BriefcaseService::Stub::getBreifcaseInfo(::grpc::ClientContext* context, const ::backendservice::BriefcaseInfoRequest& request, ::backendservice::BriefcaseInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backendservice::BriefcaseInfoRequest, ::backendservice::BriefcaseInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getBreifcaseInfo_, context, request, response);
}

void BriefcaseService::Stub::async::getBreifcaseInfo(::grpc::ClientContext* context, const ::backendservice::BriefcaseInfoRequest* request, ::backendservice::BriefcaseInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backendservice::BriefcaseInfoRequest, ::backendservice::BriefcaseInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getBreifcaseInfo_, context, request, response, std::move(f));
}

void BriefcaseService::Stub::async::getBreifcaseInfo(::grpc::ClientContext* context, const ::backendservice::BriefcaseInfoRequest* request, ::backendservice::BriefcaseInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getBreifcaseInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseInfoResponse>* BriefcaseService::Stub::PrepareAsyncgetBreifcaseInfoRaw(::grpc::ClientContext* context, const ::backendservice::BriefcaseInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backendservice::BriefcaseInfoResponse, ::backendservice::BriefcaseInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getBreifcaseInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backendservice::BriefcaseInfoResponse>* BriefcaseService::Stub::AsyncgetBreifcaseInfoRaw(::grpc::ClientContext* context, const ::backendservice::BriefcaseInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetBreifcaseInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BriefcaseService::Stub::addRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::backendservice::RecomendedValuesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backendservice::RecomendedValuesRequest, ::backendservice::RecomendedValuesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addRecomendedValues_, context, request, response);
}

void BriefcaseService::Stub::async::addRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest* request, ::backendservice::RecomendedValuesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backendservice::RecomendedValuesRequest, ::backendservice::RecomendedValuesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addRecomendedValues_, context, request, response, std::move(f));
}

void BriefcaseService::Stub::async::addRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest* request, ::backendservice::RecomendedValuesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addRecomendedValues_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backendservice::RecomendedValuesResponse>* BriefcaseService::Stub::PrepareAsyncaddRecomendedValuesRaw(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backendservice::RecomendedValuesResponse, ::backendservice::RecomendedValuesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addRecomendedValues_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backendservice::RecomendedValuesResponse>* BriefcaseService::Stub::AsyncaddRecomendedValuesRaw(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddRecomendedValuesRaw(context, request, cq);
  result->StartCall();
  return result;
}

BriefcaseService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BriefcaseService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BriefcaseService::Service, ::backendservice::BriefcaseCSVRequest, ::backendservice::BriefcaseCSVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BriefcaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backendservice::BriefcaseCSVRequest* req,
             ::backendservice::BriefcaseCSVResponse* resp) {
               return service->postCsv(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BriefcaseService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BriefcaseService::Service, ::backendservice::BriefcaseCSVRequest, ::backendservice::BriefcaseCSVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BriefcaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backendservice::BriefcaseCSVRequest* req,
             ::backendservice::BriefcaseCSVResponse* resp) {
               return service->putBreafecase(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BriefcaseService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BriefcaseService::Service, ::backendservice::BriefcaseInfoRequest, ::backendservice::BriefcaseInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BriefcaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backendservice::BriefcaseInfoRequest* req,
             ::backendservice::BriefcaseInfoResponse* resp) {
               return service->getBreifcaseInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BriefcaseService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BriefcaseService::Service, ::backendservice::RecomendedValuesRequest, ::backendservice::RecomendedValuesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BriefcaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backendservice::RecomendedValuesRequest* req,
             ::backendservice::RecomendedValuesResponse* resp) {
               return service->addRecomendedValues(ctx, req, resp);
             }, this)));
}

BriefcaseService::Service::~Service() {
}

::grpc::Status BriefcaseService::Service::postCsv(::grpc::ServerContext* context, const ::backendservice::BriefcaseCSVRequest* request, ::backendservice::BriefcaseCSVResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BriefcaseService::Service::putBreafecase(::grpc::ServerContext* context, const ::backendservice::BriefcaseCSVRequest* request, ::backendservice::BriefcaseCSVResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BriefcaseService::Service::getBreifcaseInfo(::grpc::ServerContext* context, const ::backendservice::BriefcaseInfoRequest* request, ::backendservice::BriefcaseInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BriefcaseService::Service::addRecomendedValues(::grpc::ServerContext* context, const ::backendservice::RecomendedValuesRequest* request, ::backendservice::RecomendedValuesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace backendservice

