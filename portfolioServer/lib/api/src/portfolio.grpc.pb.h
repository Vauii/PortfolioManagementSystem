// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: portfolio.proto
#ifndef GRPC_portfolio_2eproto__INCLUDED
#define GRPC_portfolio_2eproto__INCLUDED

#include "portfolio.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace backendservice {

class PortfolioService final {
 public:
  static constexpr char const* service_full_name() {
    return "backendservice.PortfolioService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status postCsv(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::backendservice::PortfolioCSVResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::PortfolioCSVResponse>> AsyncpostCsv(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::PortfolioCSVResponse>>(AsyncpostCsvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::PortfolioCSVResponse>> PrepareAsyncpostCsv(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::PortfolioCSVResponse>>(PrepareAsyncpostCsvRaw(context, request, cq));
    }
    virtual ::grpc::Status putPortfolio(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::backendservice::PortfolioCSVResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::PortfolioCSVResponse>> AsyncputPortfolio(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::PortfolioCSVResponse>>(AsyncputPortfolioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::PortfolioCSVResponse>> PrepareAsyncputPortfolio(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::PortfolioCSVResponse>>(PrepareAsyncputPortfolioRaw(context, request, cq));
    }
    virtual ::grpc::Status getPortfolioInfo(::grpc::ClientContext* context, const ::backendservice::PortfolioInfoRequest& request, ::backendservice::PortfolioInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::PortfolioInfoResponse>> AsyncgetPortfolioInfo(::grpc::ClientContext* context, const ::backendservice::PortfolioInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::PortfolioInfoResponse>>(AsyncgetPortfolioInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::PortfolioInfoResponse>> PrepareAsyncgetPortfolioInfo(::grpc::ClientContext* context, const ::backendservice::PortfolioInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::PortfolioInfoResponse>>(PrepareAsyncgetPortfolioInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status addRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::backendservice::RecomendedValuesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::RecomendedValuesResponse>> AsyncaddRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::RecomendedValuesResponse>>(AsyncaddRecomendedValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::RecomendedValuesResponse>> PrepareAsyncaddRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::RecomendedValuesResponse>>(PrepareAsyncaddRecomendedValuesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void postCsv(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest* request, ::backendservice::PortfolioCSVResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void postCsv(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest* request, ::backendservice::PortfolioCSVResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void putPortfolio(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest* request, ::backendservice::PortfolioCSVResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void putPortfolio(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest* request, ::backendservice::PortfolioCSVResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getPortfolioInfo(::grpc::ClientContext* context, const ::backendservice::PortfolioInfoRequest* request, ::backendservice::PortfolioInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getPortfolioInfo(::grpc::ClientContext* context, const ::backendservice::PortfolioInfoRequest* request, ::backendservice::PortfolioInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void addRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest* request, ::backendservice::RecomendedValuesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void addRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest* request, ::backendservice::RecomendedValuesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::PortfolioCSVResponse>* AsyncpostCsvRaw(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::PortfolioCSVResponse>* PrepareAsyncpostCsvRaw(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::PortfolioCSVResponse>* AsyncputPortfolioRaw(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::PortfolioCSVResponse>* PrepareAsyncputPortfolioRaw(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::PortfolioInfoResponse>* AsyncgetPortfolioInfoRaw(::grpc::ClientContext* context, const ::backendservice::PortfolioInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::PortfolioInfoResponse>* PrepareAsyncgetPortfolioInfoRaw(::grpc::ClientContext* context, const ::backendservice::PortfolioInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::RecomendedValuesResponse>* AsyncaddRecomendedValuesRaw(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backendservice::RecomendedValuesResponse>* PrepareAsyncaddRecomendedValuesRaw(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status postCsv(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::backendservice::PortfolioCSVResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::PortfolioCSVResponse>> AsyncpostCsv(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::PortfolioCSVResponse>>(AsyncpostCsvRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::PortfolioCSVResponse>> PrepareAsyncpostCsv(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::PortfolioCSVResponse>>(PrepareAsyncpostCsvRaw(context, request, cq));
    }
    ::grpc::Status putPortfolio(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::backendservice::PortfolioCSVResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::PortfolioCSVResponse>> AsyncputPortfolio(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::PortfolioCSVResponse>>(AsyncputPortfolioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::PortfolioCSVResponse>> PrepareAsyncputPortfolio(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::PortfolioCSVResponse>>(PrepareAsyncputPortfolioRaw(context, request, cq));
    }
    ::grpc::Status getPortfolioInfo(::grpc::ClientContext* context, const ::backendservice::PortfolioInfoRequest& request, ::backendservice::PortfolioInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::PortfolioInfoResponse>> AsyncgetPortfolioInfo(::grpc::ClientContext* context, const ::backendservice::PortfolioInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::PortfolioInfoResponse>>(AsyncgetPortfolioInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::PortfolioInfoResponse>> PrepareAsyncgetPortfolioInfo(::grpc::ClientContext* context, const ::backendservice::PortfolioInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::PortfolioInfoResponse>>(PrepareAsyncgetPortfolioInfoRaw(context, request, cq));
    }
    ::grpc::Status addRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::backendservice::RecomendedValuesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::RecomendedValuesResponse>> AsyncaddRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::RecomendedValuesResponse>>(AsyncaddRecomendedValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::RecomendedValuesResponse>> PrepareAsyncaddRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backendservice::RecomendedValuesResponse>>(PrepareAsyncaddRecomendedValuesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void postCsv(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest* request, ::backendservice::PortfolioCSVResponse* response, std::function<void(::grpc::Status)>) override;
      void postCsv(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest* request, ::backendservice::PortfolioCSVResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void putPortfolio(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest* request, ::backendservice::PortfolioCSVResponse* response, std::function<void(::grpc::Status)>) override;
      void putPortfolio(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest* request, ::backendservice::PortfolioCSVResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getPortfolioInfo(::grpc::ClientContext* context, const ::backendservice::PortfolioInfoRequest* request, ::backendservice::PortfolioInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void getPortfolioInfo(::grpc::ClientContext* context, const ::backendservice::PortfolioInfoRequest* request, ::backendservice::PortfolioInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void addRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest* request, ::backendservice::RecomendedValuesResponse* response, std::function<void(::grpc::Status)>) override;
      void addRecomendedValues(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest* request, ::backendservice::RecomendedValuesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::backendservice::PortfolioCSVResponse>* AsyncpostCsvRaw(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backendservice::PortfolioCSVResponse>* PrepareAsyncpostCsvRaw(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backendservice::PortfolioCSVResponse>* AsyncputPortfolioRaw(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backendservice::PortfolioCSVResponse>* PrepareAsyncputPortfolioRaw(::grpc::ClientContext* context, const ::backendservice::PortfolioCSVRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backendservice::PortfolioInfoResponse>* AsyncgetPortfolioInfoRaw(::grpc::ClientContext* context, const ::backendservice::PortfolioInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backendservice::PortfolioInfoResponse>* PrepareAsyncgetPortfolioInfoRaw(::grpc::ClientContext* context, const ::backendservice::PortfolioInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backendservice::RecomendedValuesResponse>* AsyncaddRecomendedValuesRaw(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backendservice::RecomendedValuesResponse>* PrepareAsyncaddRecomendedValuesRaw(::grpc::ClientContext* context, const ::backendservice::RecomendedValuesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_postCsv_;
    const ::grpc::internal::RpcMethod rpcmethod_putPortfolio_;
    const ::grpc::internal::RpcMethod rpcmethod_getPortfolioInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_addRecomendedValues_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status postCsv(::grpc::ServerContext* context, const ::backendservice::PortfolioCSVRequest* request, ::backendservice::PortfolioCSVResponse* response);
    virtual ::grpc::Status putPortfolio(::grpc::ServerContext* context, const ::backendservice::PortfolioCSVRequest* request, ::backendservice::PortfolioCSVResponse* response);
    virtual ::grpc::Status getPortfolioInfo(::grpc::ServerContext* context, const ::backendservice::PortfolioInfoRequest* request, ::backendservice::PortfolioInfoResponse* response);
    virtual ::grpc::Status addRecomendedValues(::grpc::ServerContext* context, const ::backendservice::RecomendedValuesRequest* request, ::backendservice::RecomendedValuesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_postCsv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_postCsv() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_postCsv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postCsv(::grpc::ServerContext* /*context*/, const ::backendservice::PortfolioCSVRequest* /*request*/, ::backendservice::PortfolioCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpostCsv(::grpc::ServerContext* context, ::backendservice::PortfolioCSVRequest* request, ::grpc::ServerAsyncResponseWriter< ::backendservice::PortfolioCSVResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_putPortfolio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_putPortfolio() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_putPortfolio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status putPortfolio(::grpc::ServerContext* /*context*/, const ::backendservice::PortfolioCSVRequest* /*request*/, ::backendservice::PortfolioCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestputPortfolio(::grpc::ServerContext* context, ::backendservice::PortfolioCSVRequest* request, ::grpc::ServerAsyncResponseWriter< ::backendservice::PortfolioCSVResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPortfolioInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPortfolioInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getPortfolioInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPortfolioInfo(::grpc::ServerContext* /*context*/, const ::backendservice::PortfolioInfoRequest* /*request*/, ::backendservice::PortfolioInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPortfolioInfo(::grpc::ServerContext* context, ::backendservice::PortfolioInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::backendservice::PortfolioInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addRecomendedValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addRecomendedValues() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_addRecomendedValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addRecomendedValues(::grpc::ServerContext* /*context*/, const ::backendservice::RecomendedValuesRequest* /*request*/, ::backendservice::RecomendedValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddRecomendedValues(::grpc::ServerContext* context, ::backendservice::RecomendedValuesRequest* request, ::grpc::ServerAsyncResponseWriter< ::backendservice::RecomendedValuesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_postCsv<WithAsyncMethod_putPortfolio<WithAsyncMethod_getPortfolioInfo<WithAsyncMethod_addRecomendedValues<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_postCsv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_postCsv() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::backendservice::PortfolioCSVRequest, ::backendservice::PortfolioCSVResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backendservice::PortfolioCSVRequest* request, ::backendservice::PortfolioCSVResponse* response) { return this->postCsv(context, request, response); }));}
    void SetMessageAllocatorFor_postCsv(
        ::grpc::MessageAllocator< ::backendservice::PortfolioCSVRequest, ::backendservice::PortfolioCSVResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backendservice::PortfolioCSVRequest, ::backendservice::PortfolioCSVResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_postCsv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postCsv(::grpc::ServerContext* /*context*/, const ::backendservice::PortfolioCSVRequest* /*request*/, ::backendservice::PortfolioCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* postCsv(
      ::grpc::CallbackServerContext* /*context*/, const ::backendservice::PortfolioCSVRequest* /*request*/, ::backendservice::PortfolioCSVResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_putPortfolio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_putPortfolio() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::backendservice::PortfolioCSVRequest, ::backendservice::PortfolioCSVResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backendservice::PortfolioCSVRequest* request, ::backendservice::PortfolioCSVResponse* response) { return this->putPortfolio(context, request, response); }));}
    void SetMessageAllocatorFor_putPortfolio(
        ::grpc::MessageAllocator< ::backendservice::PortfolioCSVRequest, ::backendservice::PortfolioCSVResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backendservice::PortfolioCSVRequest, ::backendservice::PortfolioCSVResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_putPortfolio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status putPortfolio(::grpc::ServerContext* /*context*/, const ::backendservice::PortfolioCSVRequest* /*request*/, ::backendservice::PortfolioCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* putPortfolio(
      ::grpc::CallbackServerContext* /*context*/, const ::backendservice::PortfolioCSVRequest* /*request*/, ::backendservice::PortfolioCSVResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getPortfolioInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getPortfolioInfo() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::backendservice::PortfolioInfoRequest, ::backendservice::PortfolioInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backendservice::PortfolioInfoRequest* request, ::backendservice::PortfolioInfoResponse* response) { return this->getPortfolioInfo(context, request, response); }));}
    void SetMessageAllocatorFor_getPortfolioInfo(
        ::grpc::MessageAllocator< ::backendservice::PortfolioInfoRequest, ::backendservice::PortfolioInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backendservice::PortfolioInfoRequest, ::backendservice::PortfolioInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getPortfolioInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPortfolioInfo(::grpc::ServerContext* /*context*/, const ::backendservice::PortfolioInfoRequest* /*request*/, ::backendservice::PortfolioInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPortfolioInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::backendservice::PortfolioInfoRequest* /*request*/, ::backendservice::PortfolioInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_addRecomendedValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_addRecomendedValues() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::backendservice::RecomendedValuesRequest, ::backendservice::RecomendedValuesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backendservice::RecomendedValuesRequest* request, ::backendservice::RecomendedValuesResponse* response) { return this->addRecomendedValues(context, request, response); }));}
    void SetMessageAllocatorFor_addRecomendedValues(
        ::grpc::MessageAllocator< ::backendservice::RecomendedValuesRequest, ::backendservice::RecomendedValuesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backendservice::RecomendedValuesRequest, ::backendservice::RecomendedValuesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_addRecomendedValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addRecomendedValues(::grpc::ServerContext* /*context*/, const ::backendservice::RecomendedValuesRequest* /*request*/, ::backendservice::RecomendedValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addRecomendedValues(
      ::grpc::CallbackServerContext* /*context*/, const ::backendservice::RecomendedValuesRequest* /*request*/, ::backendservice::RecomendedValuesResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_postCsv<WithCallbackMethod_putPortfolio<WithCallbackMethod_getPortfolioInfo<WithCallbackMethod_addRecomendedValues<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_postCsv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_postCsv() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_postCsv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postCsv(::grpc::ServerContext* /*context*/, const ::backendservice::PortfolioCSVRequest* /*request*/, ::backendservice::PortfolioCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_putPortfolio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_putPortfolio() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_putPortfolio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status putPortfolio(::grpc::ServerContext* /*context*/, const ::backendservice::PortfolioCSVRequest* /*request*/, ::backendservice::PortfolioCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPortfolioInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPortfolioInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getPortfolioInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPortfolioInfo(::grpc::ServerContext* /*context*/, const ::backendservice::PortfolioInfoRequest* /*request*/, ::backendservice::PortfolioInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addRecomendedValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addRecomendedValues() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_addRecomendedValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addRecomendedValues(::grpc::ServerContext* /*context*/, const ::backendservice::RecomendedValuesRequest* /*request*/, ::backendservice::RecomendedValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_postCsv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_postCsv() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_postCsv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postCsv(::grpc::ServerContext* /*context*/, const ::backendservice::PortfolioCSVRequest* /*request*/, ::backendservice::PortfolioCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestpostCsv(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_putPortfolio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_putPortfolio() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_putPortfolio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status putPortfolio(::grpc::ServerContext* /*context*/, const ::backendservice::PortfolioCSVRequest* /*request*/, ::backendservice::PortfolioCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestputPortfolio(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPortfolioInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPortfolioInfo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getPortfolioInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPortfolioInfo(::grpc::ServerContext* /*context*/, const ::backendservice::PortfolioInfoRequest* /*request*/, ::backendservice::PortfolioInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPortfolioInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_addRecomendedValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addRecomendedValues() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_addRecomendedValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addRecomendedValues(::grpc::ServerContext* /*context*/, const ::backendservice::RecomendedValuesRequest* /*request*/, ::backendservice::RecomendedValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddRecomendedValues(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_postCsv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_postCsv() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->postCsv(context, request, response); }));
    }
    ~WithRawCallbackMethod_postCsv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status postCsv(::grpc::ServerContext* /*context*/, const ::backendservice::PortfolioCSVRequest* /*request*/, ::backendservice::PortfolioCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* postCsv(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_putPortfolio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_putPortfolio() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->putPortfolio(context, request, response); }));
    }
    ~WithRawCallbackMethod_putPortfolio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status putPortfolio(::grpc::ServerContext* /*context*/, const ::backendservice::PortfolioCSVRequest* /*request*/, ::backendservice::PortfolioCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* putPortfolio(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getPortfolioInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getPortfolioInfo() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPortfolioInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_getPortfolioInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPortfolioInfo(::grpc::ServerContext* /*context*/, const ::backendservice::PortfolioInfoRequest* /*request*/, ::backendservice::PortfolioInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPortfolioInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_addRecomendedValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_addRecomendedValues() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addRecomendedValues(context, request, response); }));
    }
    ~WithRawCallbackMethod_addRecomendedValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addRecomendedValues(::grpc::ServerContext* /*context*/, const ::backendservice::RecomendedValuesRequest* /*request*/, ::backendservice::RecomendedValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addRecomendedValues(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_postCsv : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_postCsv() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backendservice::PortfolioCSVRequest, ::backendservice::PortfolioCSVResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backendservice::PortfolioCSVRequest, ::backendservice::PortfolioCSVResponse>* streamer) {
                       return this->StreamedpostCsv(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_postCsv() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status postCsv(::grpc::ServerContext* /*context*/, const ::backendservice::PortfolioCSVRequest* /*request*/, ::backendservice::PortfolioCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedpostCsv(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backendservice::PortfolioCSVRequest,::backendservice::PortfolioCSVResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_putPortfolio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_putPortfolio() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backendservice::PortfolioCSVRequest, ::backendservice::PortfolioCSVResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backendservice::PortfolioCSVRequest, ::backendservice::PortfolioCSVResponse>* streamer) {
                       return this->StreamedputPortfolio(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_putPortfolio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status putPortfolio(::grpc::ServerContext* /*context*/, const ::backendservice::PortfolioCSVRequest* /*request*/, ::backendservice::PortfolioCSVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedputPortfolio(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backendservice::PortfolioCSVRequest,::backendservice::PortfolioCSVResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPortfolioInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPortfolioInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backendservice::PortfolioInfoRequest, ::backendservice::PortfolioInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backendservice::PortfolioInfoRequest, ::backendservice::PortfolioInfoResponse>* streamer) {
                       return this->StreamedgetPortfolioInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPortfolioInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPortfolioInfo(::grpc::ServerContext* /*context*/, const ::backendservice::PortfolioInfoRequest* /*request*/, ::backendservice::PortfolioInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPortfolioInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backendservice::PortfolioInfoRequest,::backendservice::PortfolioInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addRecomendedValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addRecomendedValues() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backendservice::RecomendedValuesRequest, ::backendservice::RecomendedValuesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backendservice::RecomendedValuesRequest, ::backendservice::RecomendedValuesResponse>* streamer) {
                       return this->StreamedaddRecomendedValues(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addRecomendedValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addRecomendedValues(::grpc::ServerContext* /*context*/, const ::backendservice::RecomendedValuesRequest* /*request*/, ::backendservice::RecomendedValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddRecomendedValues(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backendservice::RecomendedValuesRequest,::backendservice::RecomendedValuesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_postCsv<WithStreamedUnaryMethod_putPortfolio<WithStreamedUnaryMethod_getPortfolioInfo<WithStreamedUnaryMethod_addRecomendedValues<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_postCsv<WithStreamedUnaryMethod_putPortfolio<WithStreamedUnaryMethod_getPortfolioInfo<WithStreamedUnaryMethod_addRecomendedValues<Service > > > > StreamedService;
};

}  // namespace backendservice


#endif  // GRPC_portfolio_2eproto__INCLUDED
