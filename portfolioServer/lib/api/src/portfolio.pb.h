// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: portfolio.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_portfolio_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_portfolio_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_portfolio_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_portfolio_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_portfolio_2eproto;
namespace backendservice {
class DataInfo;
struct DataInfoDefaultTypeInternal;
extern DataInfoDefaultTypeInternal _DataInfo_default_instance_;
class PortfolioCSVRequest;
struct PortfolioCSVRequestDefaultTypeInternal;
extern PortfolioCSVRequestDefaultTypeInternal _PortfolioCSVRequest_default_instance_;
class PortfolioCSVResponse;
struct PortfolioCSVResponseDefaultTypeInternal;
extern PortfolioCSVResponseDefaultTypeInternal _PortfolioCSVResponse_default_instance_;
class PortfolioInfoRequest;
struct PortfolioInfoRequestDefaultTypeInternal;
extern PortfolioInfoRequestDefaultTypeInternal _PortfolioInfoRequest_default_instance_;
class PortfolioInfoResponse;
struct PortfolioInfoResponseDefaultTypeInternal;
extern PortfolioInfoResponseDefaultTypeInternal _PortfolioInfoResponse_default_instance_;
class RecomendedValue;
struct RecomendedValueDefaultTypeInternal;
extern RecomendedValueDefaultTypeInternal _RecomendedValue_default_instance_;
class RecomendedValuesRequest;
struct RecomendedValuesRequestDefaultTypeInternal;
extern RecomendedValuesRequestDefaultTypeInternal _RecomendedValuesRequest_default_instance_;
class RecomendedValuesResponse;
struct RecomendedValuesResponseDefaultTypeInternal;
extern RecomendedValuesResponseDefaultTypeInternal _RecomendedValuesResponse_default_instance_;
}  // namespace backendservice
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace backendservice {
enum EInfoType : int {
  FULL = 0,
  RISED = 2,
  FALLEN = 3,
  EInfoType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EInfoType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EInfoType_IsValid(int value);
extern const uint32_t EInfoType_internal_data_[];
constexpr EInfoType EInfoType_MIN = static_cast<EInfoType>(0);
constexpr EInfoType EInfoType_MAX = static_cast<EInfoType>(3);
constexpr int EInfoType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
EInfoType_descriptor();
template <typename T>
const std::string& EInfoType_Name(T value) {
  static_assert(std::is_same<T, EInfoType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EInfoType_Name().");
  return EInfoType_Name(static_cast<EInfoType>(value));
}
template <>
inline const std::string& EInfoType_Name(EInfoType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EInfoType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool EInfoType_Parse(absl::string_view name, EInfoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EInfoType>(
      EInfoType_descriptor(), name, value);
}
enum EPrediction : int {
  STAY = 0,
  SELL = 1,
  UNPROFITABLE = 2,
  EPrediction_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EPrediction_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EPrediction_IsValid(int value);
extern const uint32_t EPrediction_internal_data_[];
constexpr EPrediction EPrediction_MIN = static_cast<EPrediction>(0);
constexpr EPrediction EPrediction_MAX = static_cast<EPrediction>(2);
constexpr int EPrediction_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
EPrediction_descriptor();
template <typename T>
const std::string& EPrediction_Name(T value) {
  static_assert(std::is_same<T, EPrediction>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EPrediction_Name().");
  return EPrediction_Name(static_cast<EPrediction>(value));
}
template <>
inline const std::string& EPrediction_Name(EPrediction value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EPrediction_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool EPrediction_Parse(absl::string_view name, EPrediction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPrediction>(
      EPrediction_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RecomendedValuesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:backendservice.RecomendedValuesResponse) */ {
 public:
  inline RecomendedValuesResponse() : RecomendedValuesResponse(nullptr) {}
  ~RecomendedValuesResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RecomendedValuesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RecomendedValuesResponse(const RecomendedValuesResponse& from) : RecomendedValuesResponse(nullptr, from) {}
  inline RecomendedValuesResponse(RecomendedValuesResponse&& from) noexcept
      : RecomendedValuesResponse(nullptr, std::move(from)) {}
  inline RecomendedValuesResponse& operator=(const RecomendedValuesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecomendedValuesResponse& operator=(RecomendedValuesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecomendedValuesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecomendedValuesResponse* internal_default_instance() {
    return reinterpret_cast<const RecomendedValuesResponse*>(
        &_RecomendedValuesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(RecomendedValuesResponse& a, RecomendedValuesResponse& b) { a.Swap(&b); }
  inline void Swap(RecomendedValuesResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecomendedValuesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecomendedValuesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<RecomendedValuesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RecomendedValuesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RecomendedValuesResponse& from) { RecomendedValuesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RecomendedValuesResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "backendservice.RecomendedValuesResponse"; }

 protected:
  explicit RecomendedValuesResponse(::google::protobuf::Arena* arena);
  RecomendedValuesResponse(::google::protobuf::Arena* arena, const RecomendedValuesResponse& from);
  RecomendedValuesResponse(::google::protobuf::Arena* arena, RecomendedValuesResponse&& from) noexcept
      : RecomendedValuesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // @@protoc_insertion_point(class_scope:backendservice.RecomendedValuesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      54, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RecomendedValuesResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RecomendedValuesResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_portfolio_2eproto;
};
// -------------------------------------------------------------------

class RecomendedValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:backendservice.RecomendedValue) */ {
 public:
  inline RecomendedValue() : RecomendedValue(nullptr) {}
  ~RecomendedValue() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RecomendedValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline RecomendedValue(const RecomendedValue& from) : RecomendedValue(nullptr, from) {}
  inline RecomendedValue(RecomendedValue&& from) noexcept
      : RecomendedValue(nullptr, std::move(from)) {}
  inline RecomendedValue& operator=(const RecomendedValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecomendedValue& operator=(RecomendedValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecomendedValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecomendedValue* internal_default_instance() {
    return reinterpret_cast<const RecomendedValue*>(
        &_RecomendedValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(RecomendedValue& a, RecomendedValue& b) { a.Swap(&b); }
  inline void Swap(RecomendedValue* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecomendedValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecomendedValue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<RecomendedValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RecomendedValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RecomendedValue& from) { RecomendedValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RecomendedValue* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "backendservice.RecomendedValue"; }

 protected:
  explicit RecomendedValue(::google::protobuf::Arena* arena);
  RecomendedValue(::google::protobuf::Arena* arena, const RecomendedValue& from);
  RecomendedValue(::google::protobuf::Arena* arena, RecomendedValue&& from) noexcept
      : RecomendedValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kDateOfPurchaseFieldNumber = 2,
    kPriceFieldNumber = 4,
    kCountFieldNumber = 3,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string dateOfPurchase = 2;
  void clear_dateofpurchase() ;
  const std::string& dateofpurchase() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dateofpurchase(Arg_&& arg, Args_... args);
  std::string* mutable_dateofpurchase();
  PROTOBUF_NODISCARD std::string* release_dateofpurchase();
  void set_allocated_dateofpurchase(std::string* value);

  private:
  const std::string& _internal_dateofpurchase() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dateofpurchase(
      const std::string& value);
  std::string* _internal_mutable_dateofpurchase();

  public:
  // int64 price = 4;
  void clear_price() ;
  ::int64_t price() const;
  void set_price(::int64_t value);

  private:
  ::int64_t _internal_price() const;
  void _internal_set_price(::int64_t value);

  public:
  // int32 count = 3;
  void clear_count() ;
  ::int32_t count() const;
  void set_count(::int32_t value);

  private:
  ::int32_t _internal_count() const;
  void _internal_set_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:backendservice.RecomendedValue)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      57, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RecomendedValue_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RecomendedValue& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr dateofpurchase_;
    ::int64_t price_;
    ::int32_t count_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_portfolio_2eproto;
};
// -------------------------------------------------------------------

class PortfolioInfoRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:backendservice.PortfolioInfoRequest) */ {
 public:
  inline PortfolioInfoRequest() : PortfolioInfoRequest(nullptr) {}
  ~PortfolioInfoRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PortfolioInfoRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PortfolioInfoRequest(const PortfolioInfoRequest& from) : PortfolioInfoRequest(nullptr, from) {}
  inline PortfolioInfoRequest(PortfolioInfoRequest&& from) noexcept
      : PortfolioInfoRequest(nullptr, std::move(from)) {}
  inline PortfolioInfoRequest& operator=(const PortfolioInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioInfoRequest& operator=(PortfolioInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PortfolioInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PortfolioInfoRequest* internal_default_instance() {
    return reinterpret_cast<const PortfolioInfoRequest*>(
        &_PortfolioInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(PortfolioInfoRequest& a, PortfolioInfoRequest& b) { a.Swap(&b); }
  inline void Swap(PortfolioInfoRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortfolioInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PortfolioInfoRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PortfolioInfoRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PortfolioInfoRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PortfolioInfoRequest& from) { PortfolioInfoRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PortfolioInfoRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "backendservice.PortfolioInfoRequest"; }

 protected:
  explicit PortfolioInfoRequest(::google::protobuf::Arena* arena);
  PortfolioInfoRequest(::google::protobuf::Arena* arena, const PortfolioInfoRequest& from);
  PortfolioInfoRequest(::google::protobuf::Arena* arena, PortfolioInfoRequest&& from) noexcept
      : PortfolioInfoRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInfoTypeFieldNumber = 1,
  };
  // .backendservice.EInfoType infoType = 1;
  void clear_infotype() ;
  ::backendservice::EInfoType infotype() const;
  void set_infotype(::backendservice::EInfoType value);

  private:
  ::backendservice::EInfoType _internal_infotype() const;
  void _internal_set_infotype(::backendservice::EInfoType value);

  public:
  // @@protoc_insertion_point(class_scope:backendservice.PortfolioInfoRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PortfolioInfoRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PortfolioInfoRequest& from_msg);
    int infotype_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_portfolio_2eproto;
};
// -------------------------------------------------------------------

class PortfolioCSVResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:backendservice.PortfolioCSVResponse) */ {
 public:
  inline PortfolioCSVResponse() : PortfolioCSVResponse(nullptr) {}
  ~PortfolioCSVResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PortfolioCSVResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PortfolioCSVResponse(const PortfolioCSVResponse& from) : PortfolioCSVResponse(nullptr, from) {}
  inline PortfolioCSVResponse(PortfolioCSVResponse&& from) noexcept
      : PortfolioCSVResponse(nullptr, std::move(from)) {}
  inline PortfolioCSVResponse& operator=(const PortfolioCSVResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioCSVResponse& operator=(PortfolioCSVResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PortfolioCSVResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PortfolioCSVResponse* internal_default_instance() {
    return reinterpret_cast<const PortfolioCSVResponse*>(
        &_PortfolioCSVResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(PortfolioCSVResponse& a, PortfolioCSVResponse& b) { a.Swap(&b); }
  inline void Swap(PortfolioCSVResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortfolioCSVResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PortfolioCSVResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PortfolioCSVResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PortfolioCSVResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PortfolioCSVResponse& from) { PortfolioCSVResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PortfolioCSVResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "backendservice.PortfolioCSVResponse"; }

 protected:
  explicit PortfolioCSVResponse(::google::protobuf::Arena* arena);
  PortfolioCSVResponse(::google::protobuf::Arena* arena, const PortfolioCSVResponse& from);
  PortfolioCSVResponse(::google::protobuf::Arena* arena, PortfolioCSVResponse&& from) noexcept
      : PortfolioCSVResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:backendservice.PortfolioCSVResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PortfolioCSVResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PortfolioCSVResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_portfolio_2eproto;
};
// -------------------------------------------------------------------

class PortfolioCSVRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:backendservice.PortfolioCSVRequest) */ {
 public:
  inline PortfolioCSVRequest() : PortfolioCSVRequest(nullptr) {}
  ~PortfolioCSVRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PortfolioCSVRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PortfolioCSVRequest(const PortfolioCSVRequest& from) : PortfolioCSVRequest(nullptr, from) {}
  inline PortfolioCSVRequest(PortfolioCSVRequest&& from) noexcept
      : PortfolioCSVRequest(nullptr, std::move(from)) {}
  inline PortfolioCSVRequest& operator=(const PortfolioCSVRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioCSVRequest& operator=(PortfolioCSVRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PortfolioCSVRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PortfolioCSVRequest* internal_default_instance() {
    return reinterpret_cast<const PortfolioCSVRequest*>(
        &_PortfolioCSVRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PortfolioCSVRequest& a, PortfolioCSVRequest& b) { a.Swap(&b); }
  inline void Swap(PortfolioCSVRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortfolioCSVRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PortfolioCSVRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PortfolioCSVRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PortfolioCSVRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PortfolioCSVRequest& from) { PortfolioCSVRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PortfolioCSVRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "backendservice.PortfolioCSVRequest"; }

 protected:
  explicit PortfolioCSVRequest(::google::protobuf::Arena* arena);
  PortfolioCSVRequest(::google::protobuf::Arena* arena, const PortfolioCSVRequest& from);
  PortfolioCSVRequest(::google::protobuf::Arena* arena, PortfolioCSVRequest&& from) noexcept
      : PortfolioCSVRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilenameFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string filename = 1;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // bytes content = 2;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // @@protoc_insertion_point(class_scope:backendservice.PortfolioCSVRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PortfolioCSVRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PortfolioCSVRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_portfolio_2eproto;
};
// -------------------------------------------------------------------

class DataInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:backendservice.DataInfo) */ {
 public:
  inline DataInfo() : DataInfo(nullptr) {}
  ~DataInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline DataInfo(const DataInfo& from) : DataInfo(nullptr, from) {}
  inline DataInfo(DataInfo&& from) noexcept
      : DataInfo(nullptr, std::move(from)) {}
  inline DataInfo& operator=(const DataInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataInfo& operator=(DataInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataInfo* internal_default_instance() {
    return reinterpret_cast<const DataInfo*>(
        &_DataInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(DataInfo& a, DataInfo& b) { a.Swap(&b); }
  inline void Swap(DataInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DataInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DataInfo& from) { DataInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DataInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "backendservice.DataInfo"; }

 protected:
  explicit DataInfo(::google::protobuf::Arena* arena);
  DataInfo(::google::protobuf::Arena* arena, const DataInfo& from);
  DataInfo(::google::protobuf::Arena* arena, DataInfo&& from) noexcept
      : DataInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kDateOfPurchaseFieldNumber = 2,
    kPriceOfPurchaseFieldNumber = 3,
    kPriceCurrentFieldNumber = 5,
    kCountFieldNumber = 4,
    kPredictionFieldNumber = 6,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string dateOfPurchase = 2;
  void clear_dateofpurchase() ;
  const std::string& dateofpurchase() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dateofpurchase(Arg_&& arg, Args_... args);
  std::string* mutable_dateofpurchase();
  PROTOBUF_NODISCARD std::string* release_dateofpurchase();
  void set_allocated_dateofpurchase(std::string* value);

  private:
  const std::string& _internal_dateofpurchase() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dateofpurchase(
      const std::string& value);
  std::string* _internal_mutable_dateofpurchase();

  public:
  // string priceOfPurchase = 3;
  void clear_priceofpurchase() ;
  const std::string& priceofpurchase() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_priceofpurchase(Arg_&& arg, Args_... args);
  std::string* mutable_priceofpurchase();
  PROTOBUF_NODISCARD std::string* release_priceofpurchase();
  void set_allocated_priceofpurchase(std::string* value);

  private:
  const std::string& _internal_priceofpurchase() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_priceofpurchase(
      const std::string& value);
  std::string* _internal_mutable_priceofpurchase();

  public:
  // int64 priceCurrent = 5;
  void clear_pricecurrent() ;
  ::int64_t pricecurrent() const;
  void set_pricecurrent(::int64_t value);

  private:
  ::int64_t _internal_pricecurrent() const;
  void _internal_set_pricecurrent(::int64_t value);

  public:
  // int32 count = 4;
  void clear_count() ;
  ::int32_t count() const;
  void set_count(::int32_t value);

  private:
  ::int32_t _internal_count() const;
  void _internal_set_count(::int32_t value);

  public:
  // .backendservice.EPrediction prediction = 6;
  void clear_prediction() ;
  ::backendservice::EPrediction prediction() const;
  void set_prediction(::backendservice::EPrediction value);

  private:
  ::backendservice::EPrediction _internal_prediction() const;
  void _internal_set_prediction(::backendservice::EPrediction value);

  public:
  // @@protoc_insertion_point(class_scope:backendservice.DataInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      65, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DataInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DataInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr dateofpurchase_;
    ::google::protobuf::internal::ArenaStringPtr priceofpurchase_;
    ::int64_t pricecurrent_;
    ::int32_t count_;
    int prediction_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_portfolio_2eproto;
};
// -------------------------------------------------------------------

class RecomendedValuesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:backendservice.RecomendedValuesRequest) */ {
 public:
  inline RecomendedValuesRequest() : RecomendedValuesRequest(nullptr) {}
  ~RecomendedValuesRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RecomendedValuesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RecomendedValuesRequest(const RecomendedValuesRequest& from) : RecomendedValuesRequest(nullptr, from) {}
  inline RecomendedValuesRequest(RecomendedValuesRequest&& from) noexcept
      : RecomendedValuesRequest(nullptr, std::move(from)) {}
  inline RecomendedValuesRequest& operator=(const RecomendedValuesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecomendedValuesRequest& operator=(RecomendedValuesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecomendedValuesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecomendedValuesRequest* internal_default_instance() {
    return reinterpret_cast<const RecomendedValuesRequest*>(
        &_RecomendedValuesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(RecomendedValuesRequest& a, RecomendedValuesRequest& b) { a.Swap(&b); }
  inline void Swap(RecomendedValuesRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecomendedValuesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecomendedValuesRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<RecomendedValuesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RecomendedValuesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RecomendedValuesRequest& from) { RecomendedValuesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RecomendedValuesRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "backendservice.RecomendedValuesRequest"; }

 protected:
  explicit RecomendedValuesRequest(::google::protobuf::Arena* arena);
  RecomendedValuesRequest(::google::protobuf::Arena* arena, const RecomendedValuesRequest& from);
  RecomendedValuesRequest(::google::protobuf::Arena* arena, RecomendedValuesRequest&& from) noexcept
      : RecomendedValuesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .backendservice.RecomendedValue values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::backendservice::RecomendedValue* mutable_values(int index);
  ::google::protobuf::RepeatedPtrField<::backendservice::RecomendedValue>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<::backendservice::RecomendedValue>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<::backendservice::RecomendedValue>* _internal_mutable_values();
  public:
  const ::backendservice::RecomendedValue& values(int index) const;
  ::backendservice::RecomendedValue* add_values();
  const ::google::protobuf::RepeatedPtrField<::backendservice::RecomendedValue>& values() const;
  // @@protoc_insertion_point(class_scope:backendservice.RecomendedValuesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RecomendedValuesRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RecomendedValuesRequest& from_msg);
    ::google::protobuf::RepeatedPtrField< ::backendservice::RecomendedValue > values_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_portfolio_2eproto;
};
// -------------------------------------------------------------------

class PortfolioInfoResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:backendservice.PortfolioInfoResponse) */ {
 public:
  inline PortfolioInfoResponse() : PortfolioInfoResponse(nullptr) {}
  ~PortfolioInfoResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PortfolioInfoResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PortfolioInfoResponse(const PortfolioInfoResponse& from) : PortfolioInfoResponse(nullptr, from) {}
  inline PortfolioInfoResponse(PortfolioInfoResponse&& from) noexcept
      : PortfolioInfoResponse(nullptr, std::move(from)) {}
  inline PortfolioInfoResponse& operator=(const PortfolioInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioInfoResponse& operator=(PortfolioInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PortfolioInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PortfolioInfoResponse* internal_default_instance() {
    return reinterpret_cast<const PortfolioInfoResponse*>(
        &_PortfolioInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(PortfolioInfoResponse& a, PortfolioInfoResponse& b) { a.Swap(&b); }
  inline void Swap(PortfolioInfoResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortfolioInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PortfolioInfoResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PortfolioInfoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PortfolioInfoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PortfolioInfoResponse& from) { PortfolioInfoResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PortfolioInfoResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "backendservice.PortfolioInfoResponse"; }

 protected:
  explicit PortfolioInfoResponse(::google::protobuf::Arena* arena);
  PortfolioInfoResponse(::google::protobuf::Arena* arena, const PortfolioInfoResponse& from);
  PortfolioInfoResponse(::google::protobuf::Arena* arena, PortfolioInfoResponse&& from) noexcept
      : PortfolioInfoResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInfosFieldNumber = 1,
  };
  // repeated .backendservice.DataInfo infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;

  public:
  void clear_infos() ;
  ::backendservice::DataInfo* mutable_infos(int index);
  ::google::protobuf::RepeatedPtrField<::backendservice::DataInfo>* mutable_infos();

  private:
  const ::google::protobuf::RepeatedPtrField<::backendservice::DataInfo>& _internal_infos() const;
  ::google::protobuf::RepeatedPtrField<::backendservice::DataInfo>* _internal_mutable_infos();
  public:
  const ::backendservice::DataInfo& infos(int index) const;
  ::backendservice::DataInfo* add_infos();
  const ::google::protobuf::RepeatedPtrField<::backendservice::DataInfo>& infos() const;
  // @@protoc_insertion_point(class_scope:backendservice.PortfolioInfoResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PortfolioInfoResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PortfolioInfoResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::backendservice::DataInfo > infos_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_portfolio_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DataInfo

// string name = 1;
inline void DataInfo::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DataInfo::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:backendservice.DataInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:backendservice.DataInfo.name)
}
inline std::string* DataInfo::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:backendservice.DataInfo.name)
  return _s;
}
inline const std::string& DataInfo::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void DataInfo::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* DataInfo::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* DataInfo::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:backendservice.DataInfo.name)
  return _impl_.name_.Release();
}
inline void DataInfo::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backendservice.DataInfo.name)
}

// string dateOfPurchase = 2;
inline void DataInfo::clear_dateofpurchase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dateofpurchase_.ClearToEmpty();
}
inline const std::string& DataInfo::dateofpurchase() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:backendservice.DataInfo.dateOfPurchase)
  return _internal_dateofpurchase();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataInfo::set_dateofpurchase(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dateofpurchase_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:backendservice.DataInfo.dateOfPurchase)
}
inline std::string* DataInfo::mutable_dateofpurchase() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dateofpurchase();
  // @@protoc_insertion_point(field_mutable:backendservice.DataInfo.dateOfPurchase)
  return _s;
}
inline const std::string& DataInfo::_internal_dateofpurchase() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dateofpurchase_.Get();
}
inline void DataInfo::_internal_set_dateofpurchase(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dateofpurchase_.Set(value, GetArena());
}
inline std::string* DataInfo::_internal_mutable_dateofpurchase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dateofpurchase_.Mutable( GetArena());
}
inline std::string* DataInfo::release_dateofpurchase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:backendservice.DataInfo.dateOfPurchase)
  return _impl_.dateofpurchase_.Release();
}
inline void DataInfo::set_allocated_dateofpurchase(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dateofpurchase_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dateofpurchase_.IsDefault()) {
          _impl_.dateofpurchase_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backendservice.DataInfo.dateOfPurchase)
}

// string priceOfPurchase = 3;
inline void DataInfo::clear_priceofpurchase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priceofpurchase_.ClearToEmpty();
}
inline const std::string& DataInfo::priceofpurchase() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:backendservice.DataInfo.priceOfPurchase)
  return _internal_priceofpurchase();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataInfo::set_priceofpurchase(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priceofpurchase_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:backendservice.DataInfo.priceOfPurchase)
}
inline std::string* DataInfo::mutable_priceofpurchase() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_priceofpurchase();
  // @@protoc_insertion_point(field_mutable:backendservice.DataInfo.priceOfPurchase)
  return _s;
}
inline const std::string& DataInfo::_internal_priceofpurchase() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.priceofpurchase_.Get();
}
inline void DataInfo::_internal_set_priceofpurchase(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priceofpurchase_.Set(value, GetArena());
}
inline std::string* DataInfo::_internal_mutable_priceofpurchase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.priceofpurchase_.Mutable( GetArena());
}
inline std::string* DataInfo::release_priceofpurchase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:backendservice.DataInfo.priceOfPurchase)
  return _impl_.priceofpurchase_.Release();
}
inline void DataInfo::set_allocated_priceofpurchase(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priceofpurchase_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.priceofpurchase_.IsDefault()) {
          _impl_.priceofpurchase_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backendservice.DataInfo.priceOfPurchase)
}

// int32 count = 4;
inline void DataInfo::clear_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = 0;
}
inline ::int32_t DataInfo::count() const {
  // @@protoc_insertion_point(field_get:backendservice.DataInfo.count)
  return _internal_count();
}
inline void DataInfo::set_count(::int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:backendservice.DataInfo.count)
}
inline ::int32_t DataInfo::_internal_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.count_;
}
inline void DataInfo::_internal_set_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = value;
}

// int64 priceCurrent = 5;
inline void DataInfo::clear_pricecurrent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pricecurrent_ = ::int64_t{0};
}
inline ::int64_t DataInfo::pricecurrent() const {
  // @@protoc_insertion_point(field_get:backendservice.DataInfo.priceCurrent)
  return _internal_pricecurrent();
}
inline void DataInfo::set_pricecurrent(::int64_t value) {
  _internal_set_pricecurrent(value);
  // @@protoc_insertion_point(field_set:backendservice.DataInfo.priceCurrent)
}
inline ::int64_t DataInfo::_internal_pricecurrent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pricecurrent_;
}
inline void DataInfo::_internal_set_pricecurrent(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pricecurrent_ = value;
}

// .backendservice.EPrediction prediction = 6;
inline void DataInfo::clear_prediction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prediction_ = 0;
}
inline ::backendservice::EPrediction DataInfo::prediction() const {
  // @@protoc_insertion_point(field_get:backendservice.DataInfo.prediction)
  return _internal_prediction();
}
inline void DataInfo::set_prediction(::backendservice::EPrediction value) {
  _internal_set_prediction(value);
  // @@protoc_insertion_point(field_set:backendservice.DataInfo.prediction)
}
inline ::backendservice::EPrediction DataInfo::_internal_prediction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::backendservice::EPrediction>(_impl_.prediction_);
}
inline void DataInfo::_internal_set_prediction(::backendservice::EPrediction value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prediction_ = value;
}

// -------------------------------------------------------------------

// PortfolioCSVRequest

// string filename = 1;
inline void PortfolioCSVRequest::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& PortfolioCSVRequest::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:backendservice.PortfolioCSVRequest.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PortfolioCSVRequest::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:backendservice.PortfolioCSVRequest.filename)
}
inline std::string* PortfolioCSVRequest::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:backendservice.PortfolioCSVRequest.filename)
  return _s;
}
inline const std::string& PortfolioCSVRequest::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void PortfolioCSVRequest::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* PortfolioCSVRequest::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* PortfolioCSVRequest::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:backendservice.PortfolioCSVRequest.filename)
  return _impl_.filename_.Release();
}
inline void PortfolioCSVRequest::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_.IsDefault()) {
          _impl_.filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backendservice.PortfolioCSVRequest.filename)
}

// bytes content = 2;
inline void PortfolioCSVRequest::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& PortfolioCSVRequest::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:backendservice.PortfolioCSVRequest.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PortfolioCSVRequest::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:backendservice.PortfolioCSVRequest.content)
}
inline std::string* PortfolioCSVRequest::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:backendservice.PortfolioCSVRequest.content)
  return _s;
}
inline const std::string& PortfolioCSVRequest::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void PortfolioCSVRequest::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* PortfolioCSVRequest::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* PortfolioCSVRequest::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:backendservice.PortfolioCSVRequest.content)
  return _impl_.content_.Release();
}
inline void PortfolioCSVRequest::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backendservice.PortfolioCSVRequest.content)
}

// -------------------------------------------------------------------

// PortfolioCSVResponse

// bool success = 1;
inline void PortfolioCSVResponse::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool PortfolioCSVResponse::success() const {
  // @@protoc_insertion_point(field_get:backendservice.PortfolioCSVResponse.success)
  return _internal_success();
}
inline void PortfolioCSVResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:backendservice.PortfolioCSVResponse.success)
}
inline bool PortfolioCSVResponse::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void PortfolioCSVResponse::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 2;
inline void PortfolioCSVResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& PortfolioCSVResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:backendservice.PortfolioCSVResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PortfolioCSVResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:backendservice.PortfolioCSVResponse.message)
}
inline std::string* PortfolioCSVResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:backendservice.PortfolioCSVResponse.message)
  return _s;
}
inline const std::string& PortfolioCSVResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void PortfolioCSVResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* PortfolioCSVResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* PortfolioCSVResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:backendservice.PortfolioCSVResponse.message)
  return _impl_.message_.Release();
}
inline void PortfolioCSVResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backendservice.PortfolioCSVResponse.message)
}

// -------------------------------------------------------------------

// PortfolioInfoRequest

// .backendservice.EInfoType infoType = 1;
inline void PortfolioInfoRequest::clear_infotype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.infotype_ = 0;
}
inline ::backendservice::EInfoType PortfolioInfoRequest::infotype() const {
  // @@protoc_insertion_point(field_get:backendservice.PortfolioInfoRequest.infoType)
  return _internal_infotype();
}
inline void PortfolioInfoRequest::set_infotype(::backendservice::EInfoType value) {
  _internal_set_infotype(value);
  // @@protoc_insertion_point(field_set:backendservice.PortfolioInfoRequest.infoType)
}
inline ::backendservice::EInfoType PortfolioInfoRequest::_internal_infotype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::backendservice::EInfoType>(_impl_.infotype_);
}
inline void PortfolioInfoRequest::_internal_set_infotype(::backendservice::EInfoType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.infotype_ = value;
}

// -------------------------------------------------------------------

// PortfolioInfoResponse

// repeated .backendservice.DataInfo infos = 1;
inline int PortfolioInfoResponse::_internal_infos_size() const {
  return _internal_infos().size();
}
inline int PortfolioInfoResponse::infos_size() const {
  return _internal_infos_size();
}
inline void PortfolioInfoResponse::clear_infos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.infos_.Clear();
}
inline ::backendservice::DataInfo* PortfolioInfoResponse::mutable_infos(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:backendservice.PortfolioInfoResponse.infos)
  return _internal_mutable_infos()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::backendservice::DataInfo>* PortfolioInfoResponse::mutable_infos()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:backendservice.PortfolioInfoResponse.infos)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_infos();
}
inline const ::backendservice::DataInfo& PortfolioInfoResponse::infos(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:backendservice.PortfolioInfoResponse.infos)
  return _internal_infos().Get(index);
}
inline ::backendservice::DataInfo* PortfolioInfoResponse::add_infos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::backendservice::DataInfo* _add = _internal_mutable_infos()->Add();
  // @@protoc_insertion_point(field_add:backendservice.PortfolioInfoResponse.infos)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::backendservice::DataInfo>& PortfolioInfoResponse::infos() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:backendservice.PortfolioInfoResponse.infos)
  return _internal_infos();
}
inline const ::google::protobuf::RepeatedPtrField<::backendservice::DataInfo>&
PortfolioInfoResponse::_internal_infos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.infos_;
}
inline ::google::protobuf::RepeatedPtrField<::backendservice::DataInfo>*
PortfolioInfoResponse::_internal_mutable_infos() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.infos_;
}

// -------------------------------------------------------------------

// RecomendedValue

// string name = 1;
inline void RecomendedValue::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RecomendedValue::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:backendservice.RecomendedValue.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RecomendedValue::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:backendservice.RecomendedValue.name)
}
inline std::string* RecomendedValue::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:backendservice.RecomendedValue.name)
  return _s;
}
inline const std::string& RecomendedValue::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void RecomendedValue::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* RecomendedValue::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* RecomendedValue::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:backendservice.RecomendedValue.name)
  return _impl_.name_.Release();
}
inline void RecomendedValue::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backendservice.RecomendedValue.name)
}

// string dateOfPurchase = 2;
inline void RecomendedValue::clear_dateofpurchase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dateofpurchase_.ClearToEmpty();
}
inline const std::string& RecomendedValue::dateofpurchase() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:backendservice.RecomendedValue.dateOfPurchase)
  return _internal_dateofpurchase();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RecomendedValue::set_dateofpurchase(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dateofpurchase_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:backendservice.RecomendedValue.dateOfPurchase)
}
inline std::string* RecomendedValue::mutable_dateofpurchase() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dateofpurchase();
  // @@protoc_insertion_point(field_mutable:backendservice.RecomendedValue.dateOfPurchase)
  return _s;
}
inline const std::string& RecomendedValue::_internal_dateofpurchase() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dateofpurchase_.Get();
}
inline void RecomendedValue::_internal_set_dateofpurchase(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dateofpurchase_.Set(value, GetArena());
}
inline std::string* RecomendedValue::_internal_mutable_dateofpurchase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dateofpurchase_.Mutable( GetArena());
}
inline std::string* RecomendedValue::release_dateofpurchase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:backendservice.RecomendedValue.dateOfPurchase)
  return _impl_.dateofpurchase_.Release();
}
inline void RecomendedValue::set_allocated_dateofpurchase(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dateofpurchase_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dateofpurchase_.IsDefault()) {
          _impl_.dateofpurchase_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backendservice.RecomendedValue.dateOfPurchase)
}

// int32 count = 3;
inline void RecomendedValue::clear_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = 0;
}
inline ::int32_t RecomendedValue::count() const {
  // @@protoc_insertion_point(field_get:backendservice.RecomendedValue.count)
  return _internal_count();
}
inline void RecomendedValue::set_count(::int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:backendservice.RecomendedValue.count)
}
inline ::int32_t RecomendedValue::_internal_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.count_;
}
inline void RecomendedValue::_internal_set_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_ = value;
}

// int64 price = 4;
inline void RecomendedValue::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = ::int64_t{0};
}
inline ::int64_t RecomendedValue::price() const {
  // @@protoc_insertion_point(field_get:backendservice.RecomendedValue.price)
  return _internal_price();
}
inline void RecomendedValue::set_price(::int64_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:backendservice.RecomendedValue.price)
}
inline ::int64_t RecomendedValue::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void RecomendedValue::_internal_set_price(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// -------------------------------------------------------------------

// RecomendedValuesRequest

// repeated .backendservice.RecomendedValue values = 1;
inline int RecomendedValuesRequest::_internal_values_size() const {
  return _internal_values().size();
}
inline int RecomendedValuesRequest::values_size() const {
  return _internal_values_size();
}
inline void RecomendedValuesRequest::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline ::backendservice::RecomendedValue* RecomendedValuesRequest::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:backendservice.RecomendedValuesRequest.values)
  return _internal_mutable_values()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::backendservice::RecomendedValue>* RecomendedValuesRequest::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:backendservice.RecomendedValuesRequest.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::backendservice::RecomendedValue& RecomendedValuesRequest::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:backendservice.RecomendedValuesRequest.values)
  return _internal_values().Get(index);
}
inline ::backendservice::RecomendedValue* RecomendedValuesRequest::add_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::backendservice::RecomendedValue* _add = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add:backendservice.RecomendedValuesRequest.values)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::backendservice::RecomendedValue>& RecomendedValuesRequest::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:backendservice.RecomendedValuesRequest.values)
  return _internal_values();
}
inline const ::google::protobuf::RepeatedPtrField<::backendservice::RecomendedValue>&
RecomendedValuesRequest::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<::backendservice::RecomendedValue>*
RecomendedValuesRequest::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// RecomendedValuesResponse

// string status = 1;
inline void RecomendedValuesResponse::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& RecomendedValuesResponse::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:backendservice.RecomendedValuesResponse.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RecomendedValuesResponse::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:backendservice.RecomendedValuesResponse.status)
}
inline std::string* RecomendedValuesResponse::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:backendservice.RecomendedValuesResponse.status)
  return _s;
}
inline const std::string& RecomendedValuesResponse::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void RecomendedValuesResponse::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* RecomendedValuesResponse::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* RecomendedValuesResponse::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:backendservice.RecomendedValuesResponse.status)
  return _impl_.status_.Release();
}
inline void RecomendedValuesResponse::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_.IsDefault()) {
          _impl_.status_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backendservice.RecomendedValuesResponse.status)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace backendservice


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::backendservice::EInfoType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::backendservice::EInfoType>() {
  return ::backendservice::EInfoType_descriptor();
}
template <>
struct is_proto_enum<::backendservice::EPrediction> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::backendservice::EPrediction>() {
  return ::backendservice::EPrediction_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_portfolio_2eproto_2epb_2eh
